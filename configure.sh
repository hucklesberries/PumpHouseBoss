#!/bin/bash
# ------------------------------------------------------------------------------
#  @file        configure.sh
#  @brief       Interactively generate a .makefile for the project
#  @version     1.0.0
#  @date        2025-07-18
#  @details     This script interactively generates a .makefile and substitutes
#               template variables in main.yaml to produce a customized ESPHome
#               device configuration.
#
#  @author      GitHub Copilot
#  @email       <your-email>
#
#  @license     GNU General Public License v3.0
#               SPDX-License-Identifier: GPL-3.0-or-later
#  @copyright   Copyright (c) 2025 <your-organization>
#               This program is free software: you can redistribute it and/or
#               modify it under the terms of the GNU General Public License
#               as published by the Free Software Foundation, either version 3
#               of the License, or (at your option) any later version.
#
#               This program is distributed in the hope that it will be useful,
#               but WITHOUT ANY WARRANTY; without even the implied warranty of
#               MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#               GNU General Public License for more details.
#
#               You should have received a copy of the GNU General Public License
#               along with this program. If not, see <https://www.gnu.org/licenses/>.
#
#  @note        Co-developed with GitHub Copilot by OpenAI.
# ------------------------------------------------------------------------------


# ----------------------------------------------------------------------------
#  Command line options:
# ----------------------------------------------------------------------------

# Parse command line arguments
OUTPUT_FILE="Makefile.in"
show_help() {
    echo "Usage: $0 [output_file] [-h|--help] [-v|--version]"
    echo "  output_file    Optional. Name of the output file (default: Makefile.in)"
    echo "  -h, --help     Show this help message and exit."
    echo "  -v, --version  Show script version and exit"
}

# Show version information and exit
show_version() {
    local version_file="VERSION"
    if [ -f "$version_file" ]; then
        version=$(cat "$version_file" | head -n1)
    else
        version="unknown"
    fi
    echo "v$version"
}

# Parse command line options
for arg in "$@"; do
    case "$arg" in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        *)
            OUTPUT_FILE="$arg"
            ;;
    esac
done


# ------------------------------------------------------------------------------
#  Main configuration logic
# ------------------------------------------------------------------------------

# Display friendly intro for the user
echo "This script will generate a new $OUTPUT_FILE for your ESPHome device."
echo "Press Enter to skip optional values."

# Create the output file with header notice
# Why? Because we're about to overwrite it â€” and we want users to know it's generated.
echo "# ------------------------------------------------------------------------------"   > "$OUTPUT_FILE"
echo "#  This file was auto-generated by configure.sh. Manual edits may be overwritten." >> "$OUTPUT_FILE"
echo "# ------------------------------------------------------------------------------"  >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Define sensible defaults for unattended users
platforms=("esp32s3" "esp32")
default_platform_index=0
default_device_name="sysmon-ph"
default_friendly_name="Pumphouse System Monitor"

# Prompt for platform selection
echo "Select platform for your device:"
for i in "${!platforms[@]}"; do
  printf "  [%d] %s\n" "$((i+1))" "${platforms[$i]}"
done
read -p "Enter number [default: $((default_platform_index+1))]: " PLATFORM_INDEX
PLATFORM_INDEX=${PLATFORM_INDEX:-$((default_platform_index+1))}
if ! [[ "$PLATFORM_INDEX" =~ ^[0-9]+$ ]] || (( PLATFORM_INDEX < 1 || PLATFORM_INDEX > ${#platforms[@]} )); then
  echo "Invalid selection. Using default: ${platforms[$default_platform_index]}"
  PLATFORM="${platforms[$default_platform_index]}"
else
  PLATFORM="${platforms[$((PLATFORM_INDEX-1))]}"
fi
echo "PLATFORM        = ${PLATFORM}" >> "$OUTPUT_FILE"

# Prompt for device name
read -p "Device Name (no spaces) [default: ${default_device_name}]: " DEVICE_NAME
DEVICE_NAME=${DEVICE_NAME:-${default_device_name}}
echo "DEVICE_NAME    = ${DEVICE_NAME}" >> "$OUTPUT_FILE"

# Prompt for internal node name
read -p "Node Name (no spaces) [default: ${DEVICE_NAME}]: " NODE_NAME
NODE_NAME=${NODE_NAME:-${DEVICE_NAME}}
echo "NODE_NAME      = ${NODE_NAME}" >> "$OUTPUT_FILE"

# Prompt for user-friendly display name
read -p "Friendly Name [default: ${default_friendly_name}]: " FRIENDLY_NAME
FRIENDLY_NAME="${FRIENDLY_NAME:-${default_friendly_name}}"
echo "FRIENDLY_NAME  = ${FRIENDLY_NAME}" >> "$OUTPUT_FILE"

# Prompt for upload path
read -p "Upload path [node_address (FQDN or IP) or serial port, default: ${DEVICE_NAME}.local]: " UPLOAD_PATH
UPLOAD_PATH="${UPLOAD_PATH:-${DEVICE_NAME}.local}"
echo "UPLOAD_PATH    = ${UPLOAD_PATH}" >> "$OUTPUT_FILE"


# Optional static IP configuration
read -p "Do you want to configure static network settings? [y/N]: " USE_STATIC
USE_STATIC=$(echo "$USE_STATIC" | tr '[:upper:]' '[:lower:]')

# If user answers yes/y, gather static IP details
if [ "$USE_STATIC" = "y" ] || [ "$USE_STATIC" = "yes" ]; then
    echo ""
    read -p "Static IP Address: " WIFI_STATIC_IP
    [ ! -z "$WIFI_STATIC_IP" ] && echo "WIFI_STATIC_IP = ${WIFI_STATIC_IP}" >> "$OUTPUT_FILE"

    read -p "Gateway: " WIFI_GATEWAY
    [ ! -z "$WIFI_GATEWAY" ] && echo "WIFI_GATEWAY   = ${WIFI_GATEWAY}" >> "$OUTPUT_FILE"

    read -p "Subnet: " WIFI_SUBNET
    [ ! -z "$WIFI_SUBNET" ] && echo "WIFI_SUBNET    = ${WIFI_SUBNET}" >> "$OUTPUT_FILE"

    read -p "Primary DNS: " WIFI_DNS1
    [ ! -z "$WIFI_DNS1" ] && echo "WIFI_DNS1      = ${WIFI_DNS1}" >> "$OUTPUT_FILE"

    read -p "Secondary DNS: " WIFI_DNS2
    [ ! -z "$WIFI_DNS2" ] && echo "WIFI_DNS2      = ${WIFI_DNS2}" >> "$OUTPUT_FILE"
fi


# Configuration complete
echo "$OUTPUT_FILE created successfully."