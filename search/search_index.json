{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PumpHouseBoss: ESPHome Pumphouse Monitor \u00b6 Scope & Purpose: This document provides a high-level overview, features, and onboarding information for the PumpHouseBoss project. It is the starting point for new contributors and users, describing the system, its capabilities, and how to get started. An ESPHome-based system for monitoring and managing commercial or residential pumphouse or water distribution/filtration systems. \u26a0\ufe0f This project is currently under active development and is _not ready for practical deployment. Use at your own risk!_ \u26a0\ufe0f Table of Contents \u00b6 Product Features Authorship License Available Variants Firmware Features Getting Started Collaboration Automations FAQ / Common Issues Contact & Support Product Features \u00b6 Over/under flow-rate detection, alerts and alarms Automated solenoid control for emergency water-shutoff or water-flow management/control Manual emergency override (button) to shut-off water-flow Historical flow-rate/usage graphing Home Assistant integration via ESPHome LED System Status indications 4 Line LCD Display Support for up to 8 MMUs (Monitor/Management Units) to monitor and manage up to 8 water-lines Extensible to other flow-monitoring and and management operations and fluid-types Authorship \u00b6 Project developed and maintained by: - Roland Tembo Hendel (author, architect) - GitHub Copilot (AI automation and documentation support) License \u00b6 GNU General Public License v3.0 SPDX-License-Identifier: GPL-3.0-or-later Available Variants \u00b6 The PumpHouseBoss project supports two hardware variants: PumpHouseBoss Standard \u00b6 Platform: Espressif ESP32 (30 pin) MMUs: 1 Indications: 4 LED status outputs Controls: 3 button; System Reset, Manual MMU Control (shut-off) Display: 4 line by 20 character display (lcd_pcf8574 I2C interface) Other: USB programming/debugging port Reference: PHB Standard Functional Overview PHB Standard Hardware Guide PumpHouseBoss Professional \u00b6 Platform: Espressif ESP32-S3 (44 pin) MMUs: 8 Indications: 4 LED status outputs Controls: 4 button; Display Control, Systemm Reset, Manual MMU Control (shut-off) Display: 4 line by 20 character display (lcd_pcf8574 I2C interface) Other: USB programming/debugging port Reference: PHB Professional Functional Overview PHB Professional Hardware Guide See the variants/ directory for detailed configuration and hardware mapping for each variant. Firmware Features \u00b6 Modular YAML configuration for all hardware components and variants Pinout maps and modular includes for ESP32/ESP32S3, PCF8574 display, and all I/O Comprehensive Makefile build, upload, logging, cleaning, documentation, and more Secure secrets management using secrets.template.yaml (never check in real secrets) Automated documentation generation (ESPHome, MkDocs) Automated version management and consistency checks Safety mechanisms to protect critical files and prevent destructive actions VS Code integration with pre-defined tasks for build and test Quality assurance via automated regression tests, checklists, and session continuity Getting Started \u00b6 1. Clone the Repository \u00b6 git clone https://github.com/hucklesberries/PumpHouseBoss.git cd PumpHouseBoss \u2502 \u251c\u2500\u2500 CHANGELOG.md # Project changelog \u251c\u2500\u2500 common/ # Shared YAML configs and hardware includes \u2502 \u251c\u2500\u2500 display_st7789.yaml # ST7789 display config \u2502 \u251c\u2500\u2500 esp32.yaml # ESP32 base config \u2502 \u251c\u2500\u2500 esp32s3.yaml # ESP32-S3 base config \u2502 \u251c\u2500\u2500 logging.yaml # Logging config \u2502 \u251c\u2500\u2500 ota.yaml # OTA update config \u2502 \u251c\u2500\u2500 secrets.template.yaml # Template for secrets file \u2502 \u251c\u2500\u2500 secrets.yaml # Actual secrets (not in repo) \u2502 \u251c\u2500\u2500 watchdog.yaml # Watchdog timer config \u2502 \u251c\u2500\u2500 web_server.yaml # Web server config \u2502 \u2514\u2500\u2500 wifi.yaml # WiFi config \u251c\u2500\u2500 config/ # Build and variant configuration \u2502 \u251c\u2500\u2500 config.mk # Main build config \u2502 \u251c\u2500\u2500 default.mk # Default build settings \u2502 \u251c\u2500\u2500 phb-pro-test.mk # Test config for Pro variant \u2502 \u251c\u2500\u2500 phb-std-test.mk # Test config for Standard variant \u2502 \u2514\u2500\u2500 template.mk # Template for new configs \u251c\u2500\u2500 docs/ # Documentation and MkDocs config \u2502 \u2514\u2500\u2500 mkdocs.yml # MkDocs site config \u251c\u2500\u2500 CONTRIBUTING.md # Contributor/developer guide, collaboration standards, and Copilot usage \u251c\u2500\u2500 icons/ # Status and WiFi icon images \u2502 \u251c\u2500\u2500 status_error.png # Error status icon \u2502 \u251c\u2500\u2500 status_ok.png # OK status icon \u2502 \u251c\u2500\u2500 status_warn.png # Warning status icon \u2502 \u251c\u2500\u2500 wifi-0.png # WiFi signal icon (0%) \u2502 \u251c\u2500\u2500 wifi-100.png # WiFi signal icon (100%) \u2502 \u251c\u2500\u2500 wifi_0.png # WiFi signal icon (0%) \u2502 \u251c\u2500\u2500 wifi_1.png # WiFi signal icon (25%) \u2502 \u251c\u2500\u2500 wifi_2.png # WiFi signal icon (50%) \u2502 \u251c\u2500\u2500 wifi_3.png # WiFi signal icon (75%) \u2502 \u2514\u2500\u2500 wifi_4.png # WiFi signal icon (100%) \u251c\u2500\u2500 LICENSE # Project license (GPLv3) \u251c\u2500\u2500 logs/ # Log files (created at runtime) \u251c\u2500\u2500 Makefile # Main project Makefile \u251c\u2500\u2500 makefile.mk # Makefile macros and helpers \u251c\u2500\u2500 README.md # Project overview and documentation \u251c\u2500\u2500 RELEASE-CHECKLIST.md # Release checklist (if present) \u251c\u2500\u2500 RELEASE.md # Release notes and instructions \u251c\u2500\u2500 scripts/ # Project scripts and automation \u2502 \u251c\u2500\u2500 .common.sh # Shared shell functions for scripts \u2502 \u2514\u2500\u2500 regression-test.sh # Regression test automation \u251c\u2500\u2500 STANDARDS.md # Coding standards and conventions \u251c\u2500\u2500 TODO.md # Project TODOs and future plans \u251c\u2500\u2500 variants/ # Device variant definitions \u2502 \u251c\u2500\u2500 phb-pro/ # Pro variant files \u2502 \u2502 \u251c\u2500\u2500 phb-pro-hardware.md # Pro hardware guide \u2502 \u2502 \u251c\u2500\u2500 phb-pro-overview.md # Pro functional overview \u2502 \u2502 \u251c\u2500\u2500 phb-pro.mk # Pro variant Makefile config \u2502 \u2502 \u2514\u2500\u2500 phb-pro.yaml # Pro variant YAML config \u2502 \u2514\u2500\u2500 phb-std/ # Standard variant files \u2502 \u251c\u2500\u2500 phb-std-hardware.md # Standard hardware guide \u2502 \u251c\u2500\u2500 phb-std-overview.md # Standard functional overview \u2502 \u251c\u2500\u2500 phb-std.mk # Standard variant Makefile config \u2502 \u2514\u2500\u2500 phb-std.yaml # Standard variant YAML config \u2514\u2500\u2500 VERSION # Project version string 2. Review Documentation \u00b6 Read all Markdown files in the project root for standards, changelogs, and workflow: Wiki \u00b6 The project wiki is maintained in docs/wiki/ for easy editing and backup. Key pages: Wiki Home Overview Getting Started Hardware Overview Firmware & Configuration Usage & Troubleshooting Developer Guide FAQ Contact & Support Document Title Description README.md Main project overview, setup, and documentation (this file) STANDARDS.md Coding standards, conventions, and check-in procedures RELEASE.md Release notes and instructions for new versions CHANGELOG.md Project changelog; documents all major changes and releases RELEASE-CHECKLIST.md (If present) Record of previous check-in status CONTRIBUTING.md Contributor/developer guide, session context, and Copilot usage TODO.md Project TODOs and possible future enhancements 3. Configure Your Build \u00b6 Copy the secrets template and edit your secrets: sh cp common/secrets.template.yaml common/secrets.yaml # Edit common/secrets.yaml with your actual secrets Create and edit your build configuration: sh cp configuration/template.mk configuration/config.mk # Edit configuration/config.mk to match your hardware and preferences 4. Build, Flash, and Test \u00b6 Use the following Makefile targets for common tasks: Build & Flash: - make build \u2013 Compile firmware for the selected device - make upload \u2013 Upload firmware to the device - make run \u2013 Build, upload, and start logging (all-in-one) Logging: - make logs \u2013 Start background logging to logs/DEVICE.log - make logs-follow \u2013 Follow logs in real-time - make logs-stop \u2013 Stop background logging processes - make logs-interactive \u2013 Stream logs interactively (blocks terminal) - make logs-fresh \u2013 Start fresh logging session and follow immediately Device Info & Flash: - make chip-info \u2013 Display platform chip information - make flash-info \u2013 Display flash memory information - make flash-verify \u2013 Verify flash contents against firmware build - make flash-erase \u2013 Erase entire platform flash memory (destructive!) Documentation: - make docs \u2013 Generate all documentation (ESPHome and MkDocs) - make docs-esphome \u2013 Generate ESPHome style documentation - make docs-mkdoc \u2013 Generate MkDocs style documentation (local build only) - make docs-deploy \u2013 Build and deploy MkDocs site to GitHub Pages (public docs) Cleanup: - make clean \u2013 Remove build artifacts and logs - make clean-cache \u2013 Remove ESPHome build cache - make clean-docs \u2013 Remove all generated documentation - make clobber \u2013 Remove device directory and documentation - make distclean \u2013 Complete cleanup for archive/export Test: - make regression-test \u2013 Run regression tests for the project Utility: - make version \u2013 Show project and ESPHome version - make buildvars \u2013 Show current build configuration values - make help \u2013 Show help/target summary Note on Communication Path (COMM_PATH) \u00b6 The Makefile uses the COMM_PATH variable to control how the build host machine communicates with the target ESP32/ESP32s3 device-either via serial port or the network (OTA). - If COMM_PATH is set to a device hostname (e.g., some_device.local ), upload is performed over OTA (WiFi). - If COMM_PATH is set to a serial port (e.g., COM8 or /dev/ttyUSB0 ), upload is performed over serial. Examples: - make upload COMM_PATH=phb-esp32-00.local (OTA upload) - make upload COMM_PATH=COM8 (Serial upload) Collaboration \u00b6 Contributions, collaboration, suggestions, and critique are welcome. For a comprehensive guide to the implementation standards applied to this project, please refer to PHB Implementation Standards Automations \u00b6 Several automations are included to streamline the development process. These automations can be exercised as make targets or run directly from the project 'scripts' directory. 1. sanitize.sh - performs standards conformance validation on a project file [TBD] 2. regression-test.sh - performs build and basic regression testing across all makefile targets 3. pre-check-in.sh - perfomes pre-checkin process per project standards [TBD] 4. check-in.sh - perfomes checkin process per project standards [TBD] 5. post-check-in.sh - perfomes checkin process per project standards [TBD] FAQ / Common Issues \u00b6 Q: Build fails due to missing secrets or configuration files. Ensure you have copied the secrets template ( common/secrets.template.yaml ) to common/secrets.yaml and the configuration template ( configuration/template.mk ) to configuration/config.mk , then edited them for your environment. Q: Upload or flash fails. Double-check your device is connected, the correct serial port is selected, and your user has permission to access the device. Q: Logging does not work or logs are empty. Make sure the device is running, and you are using the correct log target. Try make logs-fresh for a clean session. Q: Wrong variant or hardware configuration. Edit your configuration ( config/config.mk ) to select the correct variant and hardware options for your device. For more troubleshooting, see the project wiki or open an issue. Contact & Support \u00b6 For bug reports, questions, or contributions: - Open an issue or pull request on GitHub - Contact the maintainer via the email listed in the repository profile - See the project wiki for more documentation and help (coming soon)","title":"Home"},{"location":"#pumphouseboss-esphome-pumphouse-monitor","text":"Scope & Purpose: This document provides a high-level overview, features, and onboarding information for the PumpHouseBoss project. It is the starting point for new contributors and users, describing the system, its capabilities, and how to get started. An ESPHome-based system for monitoring and managing commercial or residential pumphouse or water distribution/filtration systems. \u26a0\ufe0f This project is currently under active development and is _not ready for practical deployment. Use at your own risk!_ \u26a0\ufe0f","title":"PumpHouseBoss: ESPHome Pumphouse Monitor"},{"location":"#table-of-contents","text":"Product Features Authorship License Available Variants Firmware Features Getting Started Collaboration Automations FAQ / Common Issues Contact & Support","title":"Table of Contents"},{"location":"#product-features","text":"Over/under flow-rate detection, alerts and alarms Automated solenoid control for emergency water-shutoff or water-flow management/control Manual emergency override (button) to shut-off water-flow Historical flow-rate/usage graphing Home Assistant integration via ESPHome LED System Status indications 4 Line LCD Display Support for up to 8 MMUs (Monitor/Management Units) to monitor and manage up to 8 water-lines Extensible to other flow-monitoring and and management operations and fluid-types","title":"Product Features"},{"location":"#authorship","text":"Project developed and maintained by: - Roland Tembo Hendel (author, architect) - GitHub Copilot (AI automation and documentation support)","title":"Authorship"},{"location":"#license","text":"GNU General Public License v3.0 SPDX-License-Identifier: GPL-3.0-or-later","title":"License"},{"location":"#available-variants","text":"The PumpHouseBoss project supports two hardware variants:","title":"Available Variants"},{"location":"#pumphouseboss-standard","text":"Platform: Espressif ESP32 (30 pin) MMUs: 1 Indications: 4 LED status outputs Controls: 3 button; System Reset, Manual MMU Control (shut-off) Display: 4 line by 20 character display (lcd_pcf8574 I2C interface) Other: USB programming/debugging port Reference: PHB Standard Functional Overview PHB Standard Hardware Guide","title":"PumpHouseBoss Standard"},{"location":"#pumphouseboss-professional","text":"Platform: Espressif ESP32-S3 (44 pin) MMUs: 8 Indications: 4 LED status outputs Controls: 4 button; Display Control, Systemm Reset, Manual MMU Control (shut-off) Display: 4 line by 20 character display (lcd_pcf8574 I2C interface) Other: USB programming/debugging port Reference: PHB Professional Functional Overview PHB Professional Hardware Guide See the variants/ directory for detailed configuration and hardware mapping for each variant.","title":"PumpHouseBoss Professional"},{"location":"#firmware-features","text":"Modular YAML configuration for all hardware components and variants Pinout maps and modular includes for ESP32/ESP32S3, PCF8574 display, and all I/O Comprehensive Makefile build, upload, logging, cleaning, documentation, and more Secure secrets management using secrets.template.yaml (never check in real secrets) Automated documentation generation (ESPHome, MkDocs) Automated version management and consistency checks Safety mechanisms to protect critical files and prevent destructive actions VS Code integration with pre-defined tasks for build and test Quality assurance via automated regression tests, checklists, and session continuity","title":"Firmware Features"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#1-clone-the-repository","text":"git clone https://github.com/hucklesberries/PumpHouseBoss.git cd PumpHouseBoss \u2502 \u251c\u2500\u2500 CHANGELOG.md # Project changelog \u251c\u2500\u2500 common/ # Shared YAML configs and hardware includes \u2502 \u251c\u2500\u2500 display_st7789.yaml # ST7789 display config \u2502 \u251c\u2500\u2500 esp32.yaml # ESP32 base config \u2502 \u251c\u2500\u2500 esp32s3.yaml # ESP32-S3 base config \u2502 \u251c\u2500\u2500 logging.yaml # Logging config \u2502 \u251c\u2500\u2500 ota.yaml # OTA update config \u2502 \u251c\u2500\u2500 secrets.template.yaml # Template for secrets file \u2502 \u251c\u2500\u2500 secrets.yaml # Actual secrets (not in repo) \u2502 \u251c\u2500\u2500 watchdog.yaml # Watchdog timer config \u2502 \u251c\u2500\u2500 web_server.yaml # Web server config \u2502 \u2514\u2500\u2500 wifi.yaml # WiFi config \u251c\u2500\u2500 config/ # Build and variant configuration \u2502 \u251c\u2500\u2500 config.mk # Main build config \u2502 \u251c\u2500\u2500 default.mk # Default build settings \u2502 \u251c\u2500\u2500 phb-pro-test.mk # Test config for Pro variant \u2502 \u251c\u2500\u2500 phb-std-test.mk # Test config for Standard variant \u2502 \u2514\u2500\u2500 template.mk # Template for new configs \u251c\u2500\u2500 docs/ # Documentation and MkDocs config \u2502 \u2514\u2500\u2500 mkdocs.yml # MkDocs site config \u251c\u2500\u2500 CONTRIBUTING.md # Contributor/developer guide, collaboration standards, and Copilot usage \u251c\u2500\u2500 icons/ # Status and WiFi icon images \u2502 \u251c\u2500\u2500 status_error.png # Error status icon \u2502 \u251c\u2500\u2500 status_ok.png # OK status icon \u2502 \u251c\u2500\u2500 status_warn.png # Warning status icon \u2502 \u251c\u2500\u2500 wifi-0.png # WiFi signal icon (0%) \u2502 \u251c\u2500\u2500 wifi-100.png # WiFi signal icon (100%) \u2502 \u251c\u2500\u2500 wifi_0.png # WiFi signal icon (0%) \u2502 \u251c\u2500\u2500 wifi_1.png # WiFi signal icon (25%) \u2502 \u251c\u2500\u2500 wifi_2.png # WiFi signal icon (50%) \u2502 \u251c\u2500\u2500 wifi_3.png # WiFi signal icon (75%) \u2502 \u2514\u2500\u2500 wifi_4.png # WiFi signal icon (100%) \u251c\u2500\u2500 LICENSE # Project license (GPLv3) \u251c\u2500\u2500 logs/ # Log files (created at runtime) \u251c\u2500\u2500 Makefile # Main project Makefile \u251c\u2500\u2500 makefile.mk # Makefile macros and helpers \u251c\u2500\u2500 README.md # Project overview and documentation \u251c\u2500\u2500 RELEASE-CHECKLIST.md # Release checklist (if present) \u251c\u2500\u2500 RELEASE.md # Release notes and instructions \u251c\u2500\u2500 scripts/ # Project scripts and automation \u2502 \u251c\u2500\u2500 .common.sh # Shared shell functions for scripts \u2502 \u2514\u2500\u2500 regression-test.sh # Regression test automation \u251c\u2500\u2500 STANDARDS.md # Coding standards and conventions \u251c\u2500\u2500 TODO.md # Project TODOs and future plans \u251c\u2500\u2500 variants/ # Device variant definitions \u2502 \u251c\u2500\u2500 phb-pro/ # Pro variant files \u2502 \u2502 \u251c\u2500\u2500 phb-pro-hardware.md # Pro hardware guide \u2502 \u2502 \u251c\u2500\u2500 phb-pro-overview.md # Pro functional overview \u2502 \u2502 \u251c\u2500\u2500 phb-pro.mk # Pro variant Makefile config \u2502 \u2502 \u2514\u2500\u2500 phb-pro.yaml # Pro variant YAML config \u2502 \u2514\u2500\u2500 phb-std/ # Standard variant files \u2502 \u251c\u2500\u2500 phb-std-hardware.md # Standard hardware guide \u2502 \u251c\u2500\u2500 phb-std-overview.md # Standard functional overview \u2502 \u251c\u2500\u2500 phb-std.mk # Standard variant Makefile config \u2502 \u2514\u2500\u2500 phb-std.yaml # Standard variant YAML config \u2514\u2500\u2500 VERSION # Project version string","title":"1. Clone the Repository"},{"location":"#2-review-documentation","text":"Read all Markdown files in the project root for standards, changelogs, and workflow:","title":"2. Review Documentation"},{"location":"#wiki","text":"The project wiki is maintained in docs/wiki/ for easy editing and backup. Key pages: Wiki Home Overview Getting Started Hardware Overview Firmware & Configuration Usage & Troubleshooting Developer Guide FAQ Contact & Support Document Title Description README.md Main project overview, setup, and documentation (this file) STANDARDS.md Coding standards, conventions, and check-in procedures RELEASE.md Release notes and instructions for new versions CHANGELOG.md Project changelog; documents all major changes and releases RELEASE-CHECKLIST.md (If present) Record of previous check-in status CONTRIBUTING.md Contributor/developer guide, session context, and Copilot usage TODO.md Project TODOs and possible future enhancements","title":"Wiki"},{"location":"#3-configure-your-build","text":"Copy the secrets template and edit your secrets: sh cp common/secrets.template.yaml common/secrets.yaml # Edit common/secrets.yaml with your actual secrets Create and edit your build configuration: sh cp configuration/template.mk configuration/config.mk # Edit configuration/config.mk to match your hardware and preferences","title":"3. Configure Your Build"},{"location":"#4-build-flash-and-test","text":"Use the following Makefile targets for common tasks: Build & Flash: - make build \u2013 Compile firmware for the selected device - make upload \u2013 Upload firmware to the device - make run \u2013 Build, upload, and start logging (all-in-one) Logging: - make logs \u2013 Start background logging to logs/DEVICE.log - make logs-follow \u2013 Follow logs in real-time - make logs-stop \u2013 Stop background logging processes - make logs-interactive \u2013 Stream logs interactively (blocks terminal) - make logs-fresh \u2013 Start fresh logging session and follow immediately Device Info & Flash: - make chip-info \u2013 Display platform chip information - make flash-info \u2013 Display flash memory information - make flash-verify \u2013 Verify flash contents against firmware build - make flash-erase \u2013 Erase entire platform flash memory (destructive!) Documentation: - make docs \u2013 Generate all documentation (ESPHome and MkDocs) - make docs-esphome \u2013 Generate ESPHome style documentation - make docs-mkdoc \u2013 Generate MkDocs style documentation (local build only) - make docs-deploy \u2013 Build and deploy MkDocs site to GitHub Pages (public docs) Cleanup: - make clean \u2013 Remove build artifacts and logs - make clean-cache \u2013 Remove ESPHome build cache - make clean-docs \u2013 Remove all generated documentation - make clobber \u2013 Remove device directory and documentation - make distclean \u2013 Complete cleanup for archive/export Test: - make regression-test \u2013 Run regression tests for the project Utility: - make version \u2013 Show project and ESPHome version - make buildvars \u2013 Show current build configuration values - make help \u2013 Show help/target summary","title":"4. Build, Flash, and Test"},{"location":"#note-on-communication-path-comm_path","text":"The Makefile uses the COMM_PATH variable to control how the build host machine communicates with the target ESP32/ESP32s3 device-either via serial port or the network (OTA). - If COMM_PATH is set to a device hostname (e.g., some_device.local ), upload is performed over OTA (WiFi). - If COMM_PATH is set to a serial port (e.g., COM8 or /dev/ttyUSB0 ), upload is performed over serial. Examples: - make upload COMM_PATH=phb-esp32-00.local (OTA upload) - make upload COMM_PATH=COM8 (Serial upload)","title":"Note on Communication Path (COMM_PATH)"},{"location":"#collaboration","text":"Contributions, collaboration, suggestions, and critique are welcome. For a comprehensive guide to the implementation standards applied to this project, please refer to PHB Implementation Standards","title":"Collaboration"},{"location":"#automations","text":"Several automations are included to streamline the development process. These automations can be exercised as make targets or run directly from the project 'scripts' directory. 1. sanitize.sh - performs standards conformance validation on a project file [TBD] 2. regression-test.sh - performs build and basic regression testing across all makefile targets 3. pre-check-in.sh - perfomes pre-checkin process per project standards [TBD] 4. check-in.sh - perfomes checkin process per project standards [TBD] 5. post-check-in.sh - perfomes checkin process per project standards [TBD]","title":"Automations"},{"location":"#faq-common-issues","text":"Q: Build fails due to missing secrets or configuration files. Ensure you have copied the secrets template ( common/secrets.template.yaml ) to common/secrets.yaml and the configuration template ( configuration/template.mk ) to configuration/config.mk , then edited them for your environment. Q: Upload or flash fails. Double-check your device is connected, the correct serial port is selected, and your user has permission to access the device. Q: Logging does not work or logs are empty. Make sure the device is running, and you are using the correct log target. Try make logs-fresh for a clean session. Q: Wrong variant or hardware configuration. Edit your configuration ( config/config.mk ) to select the correct variant and hardware options for your device. For more troubleshooting, see the project wiki or open an issue.","title":"FAQ / Common Issues"},{"location":"#contact-support","text":"For bug reports, questions, or contributions: - Open an issue or pull request on GitHub - Contact the maintainer via the email listed in the repository profile - See the project wiki for more documentation and help (coming soon)","title":"Contact &amp; Support"},{"location":"CHANGELOG/","text":"Changelog \u00b6 Scope & Purpose: This changelog provides a concise, developer-focused summary of all significant changes to PumpHouseBoss. For detailed release notes, see RELEASE.md. [0.7.1] - 2025-07-28 \u00b6 Changed \u00b6 Checked and fixed file permissions for scripts and assets (icons) Improved README.md: file tree now includes concise comments for every file Ensured all automation, Makefiles, and scripts are standards-compliant Added/updated documentation for check-in and release process General code and documentation cleanup for clarity and maintainability [0.7.0] - 2025-07-26 \u00b6 Added \u00b6 Support for multiple hardware variants with modular configuration Table of Contents, FAQ, and Contact/Support sections in documentation Security best practices: secrets template, gitignore updates, onboarding guidance Changed \u00b6 Consistent terminology and improved documentation Enhanced Makefile automation and clarified targets Improved onboarding workflow and Getting Started instructions Cleaned up and organized project TODOs and release notes [0.6.8] - 2025-07-24 \u00b6 Changed \u00b6 Repository name changed from sysmon-ph to PumpHouseBoss [0.6.7] - 2025-07-23 \u00b6 Added \u00b6 Major UI improvements for ST7789 display Pinout maps for ESP32S3, ST7789, Pico-LCD secrets.template.yaml for onboarding Changed \u00b6 Improved Makefile automation, .gitignore, and documentation Refined check-in checklist and commit message standards [0.6.6] - 2025-07-22 \u00b6 Added \u00b6 UI improvements for ST7789 display Pinout maps for ESP32S3, ST7789, Pico-LCD secrets.template.yaml for onboarding Changed \u00b6 Makefile automation, .gitignore, and documentation [0.6.1] - 2025-07-19 \u00b6 Added \u00b6 ESP32 board and framework configuration Automated device configuration via configure.sh Modular includes: wifi.yaml , ota.yaml , logging.yaml , web_server.yaml Fully automated Makefile for build, upload, and logging Changed \u00b6 Migrated to independent sysmon-ph repository Improved check-in checklist, .gitignore, and documentation [baseline-makefile-auto] - 2025-07-18 \u00b6 Snapshot before major Makefile automation overhaul [0.5.0] - 2025-07-10 \u00b6 Migrated to independent sysmon-ph repository Quality assurance system added Improved documentation, workflow, and check-in checklist [0.3.0] - 2025-06-20 \u00b6 Major refactor and cleanup Improved modularity, build scripts, and Makefile automation [0.1.0] - 2025-06-01 \u00b6 First working version of ESPHome configuration Initial Makefile and YAML includes","title":"CHANGELOG"},{"location":"CHANGELOG/#changelog","text":"Scope & Purpose: This changelog provides a concise, developer-focused summary of all significant changes to PumpHouseBoss. For detailed release notes, see RELEASE.md.","title":"Changelog"},{"location":"CHANGELOG/#071-2025-07-28","text":"","title":"[0.7.1] - 2025-07-28"},{"location":"CHANGELOG/#changed","text":"Checked and fixed file permissions for scripts and assets (icons) Improved README.md: file tree now includes concise comments for every file Ensured all automation, Makefiles, and scripts are standards-compliant Added/updated documentation for check-in and release process General code and documentation cleanup for clarity and maintainability","title":"Changed"},{"location":"CHANGELOG/#070-2025-07-26","text":"","title":"[0.7.0] - 2025-07-26"},{"location":"CHANGELOG/#added","text":"Support for multiple hardware variants with modular configuration Table of Contents, FAQ, and Contact/Support sections in documentation Security best practices: secrets template, gitignore updates, onboarding guidance","title":"Added"},{"location":"CHANGELOG/#changed_1","text":"Consistent terminology and improved documentation Enhanced Makefile automation and clarified targets Improved onboarding workflow and Getting Started instructions Cleaned up and organized project TODOs and release notes","title":"Changed"},{"location":"CHANGELOG/#068-2025-07-24","text":"","title":"[0.6.8] - 2025-07-24"},{"location":"CHANGELOG/#changed_2","text":"Repository name changed from sysmon-ph to PumpHouseBoss","title":"Changed"},{"location":"CHANGELOG/#067-2025-07-23","text":"","title":"[0.6.7] - 2025-07-23"},{"location":"CHANGELOG/#added_1","text":"Major UI improvements for ST7789 display Pinout maps for ESP32S3, ST7789, Pico-LCD secrets.template.yaml for onboarding","title":"Added"},{"location":"CHANGELOG/#changed_3","text":"Improved Makefile automation, .gitignore, and documentation Refined check-in checklist and commit message standards","title":"Changed"},{"location":"CHANGELOG/#066-2025-07-22","text":"","title":"[0.6.6] - 2025-07-22"},{"location":"CHANGELOG/#added_2","text":"UI improvements for ST7789 display Pinout maps for ESP32S3, ST7789, Pico-LCD secrets.template.yaml for onboarding","title":"Added"},{"location":"CHANGELOG/#changed_4","text":"Makefile automation, .gitignore, and documentation","title":"Changed"},{"location":"CHANGELOG/#061-2025-07-19","text":"","title":"[0.6.1] - 2025-07-19"},{"location":"CHANGELOG/#added_3","text":"ESP32 board and framework configuration Automated device configuration via configure.sh Modular includes: wifi.yaml , ota.yaml , logging.yaml , web_server.yaml Fully automated Makefile for build, upload, and logging","title":"Added"},{"location":"CHANGELOG/#changed_5","text":"Migrated to independent sysmon-ph repository Improved check-in checklist, .gitignore, and documentation","title":"Changed"},{"location":"CHANGELOG/#baseline-makefile-auto-2025-07-18","text":"Snapshot before major Makefile automation overhaul","title":"[baseline-makefile-auto] - 2025-07-18"},{"location":"CHANGELOG/#050-2025-07-10","text":"Migrated to independent sysmon-ph repository Quality assurance system added Improved documentation, workflow, and check-in checklist","title":"[0.5.0] - 2025-07-10"},{"location":"CHANGELOG/#030-2025-06-20","text":"Major refactor and cleanup Improved modularity, build scripts, and Makefile automation","title":"[0.3.0] - 2025-06-20"},{"location":"CHANGELOG/#010-2025-06-01","text":"First working version of ESPHome configuration Initial Makefile and YAML includes","title":"[0.1.0] - 2025-06-01"},{"location":"CONTRIBUTING/","text":"CONTRIBUTING.md \u2014 Project Context & Developer Guide \u00b6 Scope & Purpose: This document provides living project context, onboarding, workflow, troubleshooting, and technical notes for all contributors to PumpHouseBoss. It is the authoritative guide for day-to-day development, automation, and best practices. For a high-level project overview, see README.md . Table of Contents \u00b6 Project Overview Quick Start Development Workflow Documentation & Automation Troubleshooting & Tips Appendix: Display and UI Plan Project Overview \u00b6 ESPHome-based device management for PumpHouseBoss Professional Makefile with robust build, upload, and documentation targets Modular YAML configuration, hardware abstraction, and automation Documentation generated via MkDocs and custom scripts Quick Start \u00b6 Open VS Code in this workspace Configure your device: make configure Build firmware: make build Upload to device: make upload Stream logs: make logs Full pipeline: make run Development Workflow \u00b6 All build and upload logic is managed by the Makefile Use make help for a list of available targets Device, variant, and secrets are set via config files and Makefile variables Use make clean and make distclean for cleanup Documentation and Automation \u00b6 YAML headers and comments are extracted to Markdown for MkDocs Documentation targets: make docs \u2013 Generate all documentation (ESPHome and MkDocs) make docs-esphome \u2013 Generate ESPHome style documentation make docs-mkdoc \u2013 Generate MkDocs style documentation (local build only) make docs-deploy \u2013 Build and deploy MkDocs site to GitHub Pages (public docs) Docs output: docs/esphome/ , docs/html/ , and (if used) docs/latex/ See docs/extract_yaml_headers.py for YAML-to-Markdown automation Troubleshooting and Tips \u00b6 Use make buildvars to check current build configuration If upload fails, check COMM_PATH and device connectivity For WiFi issues, stream logs and review connection attempts Always use Unix (LF) line endings Indent shell code in Makefile recipes for clarity Appendix: Display and UI Plan \u00b6 Overview \u00b6 System status icons, text, and menu interactions Blue background, white/blue borders Cycles through sensor and solenoid data Menu for manual solenoid control Controls \u00b6 Four buttons (e.g., scroll, select) Joystick activity brings up menu Operator can turn solenoids ON/OFF manually Menu times out after inactivity UI/UX Notes \u00b6 Use icons and color highlights for clarity Data pane highlights selected menu item This file is maintained by GitHub Copilot to provide living project context and best practices for all contributors.","title":"CONTRIBUTING"},{"location":"CONTRIBUTING/#contributingmd-project-context-developer-guide","text":"Scope & Purpose: This document provides living project context, onboarding, workflow, troubleshooting, and technical notes for all contributors to PumpHouseBoss. It is the authoritative guide for day-to-day development, automation, and best practices. For a high-level project overview, see README.md .","title":"CONTRIBUTING.md \u2014 Project Context &amp; Developer Guide"},{"location":"CONTRIBUTING/#table-of-contents","text":"Project Overview Quick Start Development Workflow Documentation & Automation Troubleshooting & Tips Appendix: Display and UI Plan","title":"Table of Contents"},{"location":"CONTRIBUTING/#project-overview","text":"ESPHome-based device management for PumpHouseBoss Professional Makefile with robust build, upload, and documentation targets Modular YAML configuration, hardware abstraction, and automation Documentation generated via MkDocs and custom scripts","title":"Project Overview"},{"location":"CONTRIBUTING/#quick-start","text":"Open VS Code in this workspace Configure your device: make configure Build firmware: make build Upload to device: make upload Stream logs: make logs Full pipeline: make run","title":"Quick Start"},{"location":"CONTRIBUTING/#development-workflow","text":"All build and upload logic is managed by the Makefile Use make help for a list of available targets Device, variant, and secrets are set via config files and Makefile variables Use make clean and make distclean for cleanup","title":"Development Workflow"},{"location":"CONTRIBUTING/#documentation-and-automation","text":"YAML headers and comments are extracted to Markdown for MkDocs Documentation targets: make docs \u2013 Generate all documentation (ESPHome and MkDocs) make docs-esphome \u2013 Generate ESPHome style documentation make docs-mkdoc \u2013 Generate MkDocs style documentation (local build only) make docs-deploy \u2013 Build and deploy MkDocs site to GitHub Pages (public docs) Docs output: docs/esphome/ , docs/html/ , and (if used) docs/latex/ See docs/extract_yaml_headers.py for YAML-to-Markdown automation","title":"Documentation and Automation"},{"location":"CONTRIBUTING/#troubleshooting-and-tips","text":"Use make buildvars to check current build configuration If upload fails, check COMM_PATH and device connectivity For WiFi issues, stream logs and review connection attempts Always use Unix (LF) line endings Indent shell code in Makefile recipes for clarity","title":"Troubleshooting and Tips"},{"location":"CONTRIBUTING/#appendix-display-and-ui-plan","text":"","title":"Appendix: Display and UI Plan"},{"location":"CONTRIBUTING/#overview","text":"System status icons, text, and menu interactions Blue background, white/blue borders Cycles through sensor and solenoid data Menu for manual solenoid control","title":"Overview"},{"location":"CONTRIBUTING/#controls","text":"Four buttons (e.g., scroll, select) Joystick activity brings up menu Operator can turn solenoids ON/OFF manually Menu times out after inactivity","title":"Controls"},{"location":"CONTRIBUTING/#uiux-notes","text":"Use icons and color highlights for clarity Data pane highlights selected menu item This file is maintained by GitHub Copilot to provide living project context and best practices for all contributors.","title":"UI/UX Notes"},{"location":"GIT-COPILOT/","text":"","title":"GIT COPILOT"},{"location":"RELEASE-CHECKLIST/","text":"ESPHome Project Repository Disposition (Checklist) \u00b6 Scope & Purpose: This checklist ensures that every release of PumpHouseBoss is standards-compliant, well-documented, and ready for deployment. It guides contributors through pre-commit, commit, and post-commit steps. 1. Version & Branch \u00b6 [x] Version in VERSION file and Makefile is correct and in sync [x] Version strings updated in headers and documentation [x] Working on the correct branch for this release 2. Pre-Commit \u00b6 [x] Conduct a peer review: Request at least one other contributor to review all code and documentation changes before merging. Reviewers should check for code quality, adherence to project standards, clarity, maintainability, and correctness. Approve only when all checklist items and standards are satisfied. [x] Review all project files for standards compliance as described in STANDARDS.md. This includes: [x] Tabs and indentation [x] Line endings [x] Line spacing [x] File-type specific standards: [x] Build Files [x] Makefiles [x] Shell Scripts [x] Markdown Files [x] Upadte and validate all header files for standards conformance. [x] Ensure all files contain the correct version string. [x] Ensure all files have correct permissions. [x] Run a spellcheck on all source and documentation files. Correct any spelling errors in code comments, documentation, and user-facing strings. [x] Review .gitignore and use git status to ensure that no unwanted files are staged for commit or left untracked. [x] Update and review the README.md , TODO.md , and CONTRIBUTING.md files with all relevant changes since the previous version was checked in. [x] For every significant change, add a new entry to CHANGELOG.md describing the update. [x] Update the repository file tree in README.md . [x] Update the TOC in all documentation files. [x] Validate links in documentation files. [x] Run the regression-test.sh script and ensure all tests pass. Resolve any failures. [x] If this is a release, tag the commit appropriately and follow the project release process. [x] All code changes must be reviewed and approved by at least one other contributor before merging. 3. Commit & Push \u00b6 [ ] Commit message follows standards (concise, descriptive, references issues if needed) [ ] All staged files are intentional and relevant to the commit [ ] Checklist items above are complete before commit [ ] Push to remote and verify branch is up to date 4. Post-Commit/Pre-Release \u00b6 [ ] make distclean produces a clean workspace [ ] Fresh clone builds successfully; all dependencies are documented [ ] Confirm make help and make version reflect new version [ ] Tag release if appropriate 5. Reset for Next Cycle \u00b6 [ ] Clear all checkboxes above [ ] Update checklist version entry in history table (if present) [ ] Stage/commit checklist reset [ ] Bump VERSION/Makefile for next cycle [ ] Regression Test: make regression-test Remember: Better to catch issues in the checklist than in production! \ud83c\udfaf","title":"RELEASE-CHECKLIST"},{"location":"RELEASE-CHECKLIST/#esphome-project-repository-disposition-checklist","text":"Scope & Purpose: This checklist ensures that every release of PumpHouseBoss is standards-compliant, well-documented, and ready for deployment. It guides contributors through pre-commit, commit, and post-commit steps.","title":"ESPHome Project Repository Disposition (Checklist)"},{"location":"RELEASE-CHECKLIST/#1-version-branch","text":"[x] Version in VERSION file and Makefile is correct and in sync [x] Version strings updated in headers and documentation [x] Working on the correct branch for this release","title":"1. Version &amp; Branch"},{"location":"RELEASE-CHECKLIST/#2-pre-commit","text":"[x] Conduct a peer review: Request at least one other contributor to review all code and documentation changes before merging. Reviewers should check for code quality, adherence to project standards, clarity, maintainability, and correctness. Approve only when all checklist items and standards are satisfied. [x] Review all project files for standards compliance as described in STANDARDS.md. This includes: [x] Tabs and indentation [x] Line endings [x] Line spacing [x] File-type specific standards: [x] Build Files [x] Makefiles [x] Shell Scripts [x] Markdown Files [x] Upadte and validate all header files for standards conformance. [x] Ensure all files contain the correct version string. [x] Ensure all files have correct permissions. [x] Run a spellcheck on all source and documentation files. Correct any spelling errors in code comments, documentation, and user-facing strings. [x] Review .gitignore and use git status to ensure that no unwanted files are staged for commit or left untracked. [x] Update and review the README.md , TODO.md , and CONTRIBUTING.md files with all relevant changes since the previous version was checked in. [x] For every significant change, add a new entry to CHANGELOG.md describing the update. [x] Update the repository file tree in README.md . [x] Update the TOC in all documentation files. [x] Validate links in documentation files. [x] Run the regression-test.sh script and ensure all tests pass. Resolve any failures. [x] If this is a release, tag the commit appropriately and follow the project release process. [x] All code changes must be reviewed and approved by at least one other contributor before merging.","title":"2. Pre-Commit"},{"location":"RELEASE-CHECKLIST/#3-commit-push","text":"[ ] Commit message follows standards (concise, descriptive, references issues if needed) [ ] All staged files are intentional and relevant to the commit [ ] Checklist items above are complete before commit [ ] Push to remote and verify branch is up to date","title":"3. Commit &amp; Push"},{"location":"RELEASE-CHECKLIST/#4-post-commitpre-release","text":"[ ] make distclean produces a clean workspace [ ] Fresh clone builds successfully; all dependencies are documented [ ] Confirm make help and make version reflect new version [ ] Tag release if appropriate","title":"4. Post-Commit/Pre-Release"},{"location":"RELEASE-CHECKLIST/#5-reset-for-next-cycle","text":"[ ] Clear all checkboxes above [ ] Update checklist version entry in history table (if present) [ ] Stage/commit checklist reset [ ] Bump VERSION/Makefile for next cycle [ ] Regression Test: make regression-test Remember: Better to catch issues in the checklist than in production! \ud83c\udfaf","title":"5. Reset for Next Cycle"},{"location":"RELEASE/","text":"Release Notes \u00b6 Scope & Purpose: This document provides detailed release notes, milestones, and project status for each version of PumpHouseBoss. It is the authoritative record of changes and improvements for each release. \u26a0\ufe0f This project is currently under active development and is _not ready for practical deployment. Use at your own risk!_ \u26a0\ufe0f Version 0.7.1 \u2013 July 28, 2025 \u00b6 Milestone: Standards compliance, versioning, and automation improvements Highlights \u00b6 Checked and fixed file permissions for scripts and assets (icons) Improved README.md: file tree now includes concise comments for every file Ensured all automation, Makefiles, and scripts are standards-compliant Added/updated documentation for check-in and release process General code and documentation cleanup for clarity and maintainability Project Status \u00b6 All major files and scripts are now standards-compliant Versioning and permissions are consistent across the project Automated build, upload, and logging via Makefile Comprehensive documentation and workflow standards Version 0.7.0 \u2013 July 26, 2025 \u00b6 Pre-release milestone: Support for multiple Variants, and improved/automated processes and documentation Highlights \u00b6 Support for multiple hardware variants with modular configuration Consistent terminology and improved documentation throughout the project Added a Table of Contents, FAQ, and Contact/Support sections to the README Enhanced Makefile automation and clarified target documentation Improved onboarding workflow and stepwise Getting Started instructions Security best practices: secrets template, gitignore updates, and onboarding guidance Cleaned up and organized project TODOs and release notes General code and documentation cleanup for clarity and maintainability Project Status \u00b6 Modular YAML includes for all major subsystems Secure secrets management and onboarding template Automated build, upload, and logging via Makefile Comprehensive documentation and workflow standards Comprehensive documentation and workflow standards Version 0.6.7 \u2013 July 23, 2025 \u00b6 Pre-release milestone: Modular, maintainable, and secure ESPHome system for ESP32S3 Highlights \u00b6 Major UI improvements: ST7789 display now shows Hostname, SSID, IP, and MAC address, with robust centering and fallback for missing values Font size and layout adjustments for better data fit and readability Fixed MAC address display and improved sensor value handling Provided pinout maps for ESP32S3, ST7789 display, and Pico-LCD hardware components Improved Makefile automation and .gitignore for secrets and generated files Updated secrets.template.yaml and documentation for secure workflow Refined check-in checklist and commit message standards General code cleanup, header consistency, and version reference updates Project Status \u00b6 Modular YAML includes for all major subsystems Secure secrets management and onboarding template Automated build, upload, and logging via Makefile Comprehensive documentation and workflow standards Note: This is a pre-release for internal and development use. v1.0.0 will mark the first stable public release.","title":"RELEASE NOTES"},{"location":"RELEASE/#release-notes","text":"Scope & Purpose: This document provides detailed release notes, milestones, and project status for each version of PumpHouseBoss. It is the authoritative record of changes and improvements for each release. \u26a0\ufe0f This project is currently under active development and is _not ready for practical deployment. Use at your own risk!_ \u26a0\ufe0f","title":"Release Notes"},{"location":"RELEASE/#version-071-july-28-2025","text":"Milestone: Standards compliance, versioning, and automation improvements","title":"Version 0.7.1 \u2013 July 28, 2025"},{"location":"RELEASE/#highlights","text":"Checked and fixed file permissions for scripts and assets (icons) Improved README.md: file tree now includes concise comments for every file Ensured all automation, Makefiles, and scripts are standards-compliant Added/updated documentation for check-in and release process General code and documentation cleanup for clarity and maintainability","title":"Highlights"},{"location":"RELEASE/#project-status","text":"All major files and scripts are now standards-compliant Versioning and permissions are consistent across the project Automated build, upload, and logging via Makefile Comprehensive documentation and workflow standards","title":"Project Status"},{"location":"RELEASE/#version-070-july-26-2025","text":"Pre-release milestone: Support for multiple Variants, and improved/automated processes and documentation","title":"Version 0.7.0 \u2013 July 26, 2025"},{"location":"RELEASE/#highlights_1","text":"Support for multiple hardware variants with modular configuration Consistent terminology and improved documentation throughout the project Added a Table of Contents, FAQ, and Contact/Support sections to the README Enhanced Makefile automation and clarified target documentation Improved onboarding workflow and stepwise Getting Started instructions Security best practices: secrets template, gitignore updates, and onboarding guidance Cleaned up and organized project TODOs and release notes General code and documentation cleanup for clarity and maintainability","title":"Highlights"},{"location":"RELEASE/#project-status_1","text":"Modular YAML includes for all major subsystems Secure secrets management and onboarding template Automated build, upload, and logging via Makefile Comprehensive documentation and workflow standards Comprehensive documentation and workflow standards","title":"Project Status"},{"location":"RELEASE/#version-067-july-23-2025","text":"Pre-release milestone: Modular, maintainable, and secure ESPHome system for ESP32S3","title":"Version 0.6.7 \u2013 July 23, 2025"},{"location":"RELEASE/#highlights_2","text":"Major UI improvements: ST7789 display now shows Hostname, SSID, IP, and MAC address, with robust centering and fallback for missing values Font size and layout adjustments for better data fit and readability Fixed MAC address display and improved sensor value handling Provided pinout maps for ESP32S3, ST7789 display, and Pico-LCD hardware components Improved Makefile automation and .gitignore for secrets and generated files Updated secrets.template.yaml and documentation for secure workflow Refined check-in checklist and commit message standards General code cleanup, header consistency, and version reference updates","title":"Highlights"},{"location":"RELEASE/#project-status_2","text":"Modular YAML includes for all major subsystems Secure secrets management and onboarding template Automated build, upload, and logging via Makefile Comprehensive documentation and workflow standards Note: This is a pre-release for internal and development use. v1.0.0 will mark the first stable public release.","title":"Project Status"},{"location":"STANDARDS/","text":"STANDARDS.md \u2014 Project Conventions & Coding Standards \u00b6 Scope & Purpose: This document defines the conventions, standards, and best practices for all contributors to PumpHouseBoss. It ensures code quality, maintainability, and a consistent developer experience across the project. This document defines the conventions, standards, and best practices for all contributors to the PumpHouseBoss project. Adhering to these standards ensures code quality, maintainability, and a consistent developer experience. For the purpose of this project, the following terms are defined: - project files: Includes source files, build files, project configuration files, and documentation. - build files: Includes source files, makefiles, and configuration files required for executing makefile targets. - source files: Includes all files consisting of source code (i.e., C/C++, YAML, Python, and shell scripts). - documentation: Includes files consisting of Markdown or HTML. Table of Contents \u00b6 General Principles Project Files Build Files Makefiles Shell Scripts Markdown Files Versioning File Permissions Check-in Procedure Commit Messages Session Continuity General Principles \u00b6 Write clear, maintainable, and well-documented code. Prioritize explicitness and readability over cleverness. All project files must be licensed under GPL v3.0 or later. Project Files \u00b6 Tabs and Indentation \u00b6 Indentation must use spaces, not tabs, Except for Makefiles, tabs should be expanded to 4 spaces. Configure your editor to display tabs as 4 spaces and to insert spaces when the Tab key is pressed. For VS Code, add the following to your workspace settings: json { \"editor.tabSize\": 4, \"editor.insertSpaces\": true, \"files.eol\": \"\\n\" } For Vim, add to your .vimrc : vim set tabstop=4 set shiftwidth=4 set expandtab set fileformat=unix For Emacs, add to your .emacs or .dir-locals.el : elisp (setq-default indent-tabs-mode nil) (setq-default tab-width 4) (setq-default buffer-file-coding-system 'utf-8-unix) Note: Makefiles are required to use tabs for indentation, and as such are an exception to this rule. Line Endings \u00b6 Files must use Unix (LF) line endings. Do not use Windows (CRLF). Lines should not include trailing whitespce. Lines should not end with trailing whitespace. Line Spacing \u00b6 Files should not start with empty lines, and should end with a single empty line. Major sections should be separated by two blank lines. Minor sections should be separated by a single blank line. Build Files \u00b6 Build files must begin with the standard project header, including in order: Required: Name, Type, Purpose, Version, Date, Author Where Applicable: Description, Features, Usage, Note, Caution Required: License, Copyright See Makefile for a canonical example. Build files must include comprehensive inline documentation, including: Inline documentation consists of comments and explanations within the code, scripts, or configuration files that clarify the purpose, logic, and usage of code sections (such as code blocks, function definitions, and logic groupings), functions, variables, and complex logic. Use clear, concise comments to aid future maintainers and reviewers. Inline documentation should follow the conventions of the language or file type (e.g., # for shell scripts, // or /* ... */ for C/C++, # for YAML, etc.). PascalCase is preferred for variable names (i.e., ThisIsAVariable). UPPER_SNAKE_CASE (also known as CONSTANT_CASE) is preferred for macros and definitions (i.e., THIS_IS_A_MACRO). Note: Build files include Makefiles and related configuration files required for building the project. Makefiles are a special type of build file and must follow both the general build file standards and the additional Makefile-specific standards below. Makefiles \u00b6 Makefiles are a type of build file and must follow all build file standards in addition to the following Makefile-specific conventions: - Use phony targets for all non-file targets. - Prepend targets not meant for external use with an underscore (\"_\"). For example, use _internal_target for internal-only targets. This helps distinguish private/internal targets from those intended for public use. - Group related targets (build, docs, clean, etc.) and document them. - Use variables for directories and file lists. - Indent shell code in recipes for human readability. - Quoting Variables: Quote all variable expansions, e.g., \"$(VAR)\", to prevent word splitting and globbing issues. Shell Scripts \u00b6 Use #!/usr/bin/env bash as the shebang for all Bash scripts. Strict Mode: Use set -u (treat unset variables as errors), set -e (exit on error), and set -o pipefail (fail pipelines if any command fails) at the top of all scripts unless there is a documented reason not to. If you must omit -e (e.g., for scripts with background jobs), document this in the script header. Quoting Variables: Quote all variable expansions, e.g., \"${VAR}\" , to prevent word splitting and globbing issues. Use colorized output only if the terminal supports it. Always clean up background processes on exit or interruption. Markdown Files \u00b6 Use two blank lines before the start of major (##) sections/headers. Use one blank line before the start of minor (###...) sections/headers. Use one blank line between paragraphs or list blocks. Do not add extra blank lines within lists or between list items. Do not add blank lines before or after code blocks inside lists. Use one blank line before and after code blocks that are not inside a list. Keep Markdown formatting consistent for readability and proper rendering. Versioning \u00b6 Keep the VERSION file and Makefile version in sync. Update version strings in headers and documentation as part of the release process. File Permissions \u00b6 All executable scripts (e.g., Bash, Python) must be committed with executable permissions ( chmod 755 or chmod +x ). Data files, documentation, and configuration files should not be executable (use chmod 644 ). Do not commit files as world-writable (no chmod 777 ). Use git update-index --chmod=+x <file> to set executable bit in git if needed. Always check file permissions before committing new or modified files. Check-in Procedure \u00b6 Before committing code or documentation, contributors must: Conduct a peer review: Request at least one other contributor to review all code and documentation changes before merging. Reviewers should check for code quality, adherence to project standards, clarity, maintainability, and correctness. Provide constructive feedback and suggest improvements where needed. Ensure all comments and requested changes are addressed before approval. Approve the changes only when all checklist items and standards are satisfied. Perform all steps and clear all checkmarks in the checklist file ( RELEASE-CHECKLIST.md ). Commit Messages \u00b6 Use structured commit messages: Short summary (max 72 chars) Blank line Detailed description (if needed) Reference related issues or action items when appropriate. Session Continuity \u00b6 Use CONTRIBUTING.md for session context and developer continuity. This document is maintained by GitHub Copilot and the project maintainers. Please propose updates as standards evolve.","title":"STANDARDS"},{"location":"STANDARDS/#standardsmd-project-conventions-coding-standards","text":"Scope & Purpose: This document defines the conventions, standards, and best practices for all contributors to PumpHouseBoss. It ensures code quality, maintainability, and a consistent developer experience across the project. This document defines the conventions, standards, and best practices for all contributors to the PumpHouseBoss project. Adhering to these standards ensures code quality, maintainability, and a consistent developer experience. For the purpose of this project, the following terms are defined: - project files: Includes source files, build files, project configuration files, and documentation. - build files: Includes source files, makefiles, and configuration files required for executing makefile targets. - source files: Includes all files consisting of source code (i.e., C/C++, YAML, Python, and shell scripts). - documentation: Includes files consisting of Markdown or HTML.","title":"STANDARDS.md \u2014 Project Conventions &amp; Coding Standards"},{"location":"STANDARDS/#table-of-contents","text":"General Principles Project Files Build Files Makefiles Shell Scripts Markdown Files Versioning File Permissions Check-in Procedure Commit Messages Session Continuity","title":"Table of Contents"},{"location":"STANDARDS/#general-principles","text":"Write clear, maintainable, and well-documented code. Prioritize explicitness and readability over cleverness. All project files must be licensed under GPL v3.0 or later.","title":"General Principles"},{"location":"STANDARDS/#project-files","text":"","title":"Project Files"},{"location":"STANDARDS/#tabs-and-indentation","text":"Indentation must use spaces, not tabs, Except for Makefiles, tabs should be expanded to 4 spaces. Configure your editor to display tabs as 4 spaces and to insert spaces when the Tab key is pressed. For VS Code, add the following to your workspace settings: json { \"editor.tabSize\": 4, \"editor.insertSpaces\": true, \"files.eol\": \"\\n\" } For Vim, add to your .vimrc : vim set tabstop=4 set shiftwidth=4 set expandtab set fileformat=unix For Emacs, add to your .emacs or .dir-locals.el : elisp (setq-default indent-tabs-mode nil) (setq-default tab-width 4) (setq-default buffer-file-coding-system 'utf-8-unix) Note: Makefiles are required to use tabs for indentation, and as such are an exception to this rule.","title":"Tabs and Indentation"},{"location":"STANDARDS/#line-endings","text":"Files must use Unix (LF) line endings. Do not use Windows (CRLF). Lines should not include trailing whitespce. Lines should not end with trailing whitespace.","title":"Line Endings"},{"location":"STANDARDS/#line-spacing","text":"Files should not start with empty lines, and should end with a single empty line. Major sections should be separated by two blank lines. Minor sections should be separated by a single blank line.","title":"Line Spacing"},{"location":"STANDARDS/#build-files","text":"Build files must begin with the standard project header, including in order: Required: Name, Type, Purpose, Version, Date, Author Where Applicable: Description, Features, Usage, Note, Caution Required: License, Copyright See Makefile for a canonical example. Build files must include comprehensive inline documentation, including: Inline documentation consists of comments and explanations within the code, scripts, or configuration files that clarify the purpose, logic, and usage of code sections (such as code blocks, function definitions, and logic groupings), functions, variables, and complex logic. Use clear, concise comments to aid future maintainers and reviewers. Inline documentation should follow the conventions of the language or file type (e.g., # for shell scripts, // or /* ... */ for C/C++, # for YAML, etc.). PascalCase is preferred for variable names (i.e., ThisIsAVariable). UPPER_SNAKE_CASE (also known as CONSTANT_CASE) is preferred for macros and definitions (i.e., THIS_IS_A_MACRO). Note: Build files include Makefiles and related configuration files required for building the project. Makefiles are a special type of build file and must follow both the general build file standards and the additional Makefile-specific standards below.","title":"Build Files"},{"location":"STANDARDS/#makefiles","text":"Makefiles are a type of build file and must follow all build file standards in addition to the following Makefile-specific conventions: - Use phony targets for all non-file targets. - Prepend targets not meant for external use with an underscore (\"_\"). For example, use _internal_target for internal-only targets. This helps distinguish private/internal targets from those intended for public use. - Group related targets (build, docs, clean, etc.) and document them. - Use variables for directories and file lists. - Indent shell code in recipes for human readability. - Quoting Variables: Quote all variable expansions, e.g., \"$(VAR)\", to prevent word splitting and globbing issues.","title":"Makefiles"},{"location":"STANDARDS/#shell-scripts","text":"Use #!/usr/bin/env bash as the shebang for all Bash scripts. Strict Mode: Use set -u (treat unset variables as errors), set -e (exit on error), and set -o pipefail (fail pipelines if any command fails) at the top of all scripts unless there is a documented reason not to. If you must omit -e (e.g., for scripts with background jobs), document this in the script header. Quoting Variables: Quote all variable expansions, e.g., \"${VAR}\" , to prevent word splitting and globbing issues. Use colorized output only if the terminal supports it. Always clean up background processes on exit or interruption.","title":"Shell Scripts"},{"location":"STANDARDS/#markdown-files","text":"Use two blank lines before the start of major (##) sections/headers. Use one blank line before the start of minor (###...) sections/headers. Use one blank line between paragraphs or list blocks. Do not add extra blank lines within lists or between list items. Do not add blank lines before or after code blocks inside lists. Use one blank line before and after code blocks that are not inside a list. Keep Markdown formatting consistent for readability and proper rendering.","title":"Markdown Files"},{"location":"STANDARDS/#versioning","text":"Keep the VERSION file and Makefile version in sync. Update version strings in headers and documentation as part of the release process.","title":"Versioning"},{"location":"STANDARDS/#file-permissions","text":"All executable scripts (e.g., Bash, Python) must be committed with executable permissions ( chmod 755 or chmod +x ). Data files, documentation, and configuration files should not be executable (use chmod 644 ). Do not commit files as world-writable (no chmod 777 ). Use git update-index --chmod=+x <file> to set executable bit in git if needed. Always check file permissions before committing new or modified files.","title":"File Permissions"},{"location":"STANDARDS/#check-in-procedure","text":"Before committing code or documentation, contributors must: Conduct a peer review: Request at least one other contributor to review all code and documentation changes before merging. Reviewers should check for code quality, adherence to project standards, clarity, maintainability, and correctness. Provide constructive feedback and suggest improvements where needed. Ensure all comments and requested changes are addressed before approval. Approve the changes only when all checklist items and standards are satisfied. Perform all steps and clear all checkmarks in the checklist file ( RELEASE-CHECKLIST.md ).","title":"Check-in Procedure"},{"location":"STANDARDS/#commit-messages","text":"Use structured commit messages: Short summary (max 72 chars) Blank line Detailed description (if needed) Reference related issues or action items when appropriate.","title":"Commit Messages"},{"location":"STANDARDS/#session-continuity","text":"Use CONTRIBUTING.md for session context and developer continuity. This document is maintained by GitHub Copilot and the project maintainers. Please propose updates as standards evolve.","title":"Session Continuity"},{"location":"TODO/","text":"TODO \u00b6 Scope & Purpose: This document tracks project tasks, enhancements, and future plans for PumpHouseBoss. It is a living list for contributors to coordinate ongoing and upcoming work. General \u00b6 re-think indications (8 red LEDs?) and Controls automations: pre-checkin procedure transfer linting from regression-test? check-in procedure post-checkin procedures Processes (Makefile, Automations, Workflows) \u00b6 make add 'publish' target break-out build _generate (Being mindful of dependencies) Source \u00b6 [NOTE] To convert the social preview SVG (e.g., social-preview-valve2.svg) to PNG for GitHub: Use Inkscape: inkscape social-preview-valve2.svg --export-type=png --export-filename=social-preview-valve2.png -w 1280 -h 640 Or use an online converter (e.g., svg2png.com) Then upload the PNG in your repository settings for the social preview image. stand up wiki [ ] Enable GitHub Wiki in repository settings [ ] Create Home page with intro and navigation [ ] Add main sections: Overview, Getting Started, Hardware, Firmware, FAQ, Troubleshooting, Developer Guide [ ] Seed initial content from README.md, CONTRIBUTING.md, and docs [ ] Add diagrams/images as needed [ ] Cross-link wiki and main repo docs [ ] Invite contributors and set editing guidelines [ ] Plan for ongoing updates and advanced topics Proposed Wiki Home Page Outline: - Welcome & Project Summary - Quick Links to Key Sections - Table of Contents - Getting Started - Hardware Overview - Firmware & Configuration - Usage & Troubleshooting - Developer Guide - FAQ - Contact & Support - [DONE] Implemented make docs-deploy target for public documentation publishing - [DONE] Documentation is now published via GitHub Pages: https://hucklesberries.github.io/PumpHouseBoss/ Next Cycle \u00b6 Notes/Reminders \u00b6 must be possbile to disable MMUs CTRL for lines that must NEVER be shut-off Possible Future Enhancements \u00b6 Add automated linting/formatting steps (e.g., shellcheck, yamllint, markdownlint) to the check-in process Add a step to check for outdated dependencies and update lock files as needed Integrate security checks (e.g., bandit for Python, npm audit for Node) before release Track and enforce test coverage, ensuring new code is coveredeby tests Consider CI/CD for linting, spellcheck, and test coverage","title":"TODO"},{"location":"TODO/#todo","text":"Scope & Purpose: This document tracks project tasks, enhancements, and future plans for PumpHouseBoss. It is a living list for contributors to coordinate ongoing and upcoming work.","title":"TODO"},{"location":"TODO/#general","text":"re-think indications (8 red LEDs?) and Controls automations: pre-checkin procedure transfer linting from regression-test? check-in procedure post-checkin procedures","title":"General"},{"location":"TODO/#processes-makefile-automations-workflows","text":"make add 'publish' target break-out build _generate (Being mindful of dependencies)","title":"Processes (Makefile, Automations, Workflows)"},{"location":"TODO/#source","text":"[NOTE] To convert the social preview SVG (e.g., social-preview-valve2.svg) to PNG for GitHub: Use Inkscape: inkscape social-preview-valve2.svg --export-type=png --export-filename=social-preview-valve2.png -w 1280 -h 640 Or use an online converter (e.g., svg2png.com) Then upload the PNG in your repository settings for the social preview image. stand up wiki [ ] Enable GitHub Wiki in repository settings [ ] Create Home page with intro and navigation [ ] Add main sections: Overview, Getting Started, Hardware, Firmware, FAQ, Troubleshooting, Developer Guide [ ] Seed initial content from README.md, CONTRIBUTING.md, and docs [ ] Add diagrams/images as needed [ ] Cross-link wiki and main repo docs [ ] Invite contributors and set editing guidelines [ ] Plan for ongoing updates and advanced topics Proposed Wiki Home Page Outline: - Welcome & Project Summary - Quick Links to Key Sections - Table of Contents - Getting Started - Hardware Overview - Firmware & Configuration - Usage & Troubleshooting - Developer Guide - FAQ - Contact & Support - [DONE] Implemented make docs-deploy target for public documentation publishing - [DONE] Documentation is now published via GitHub Pages: https://hucklesberries.github.io/PumpHouseBoss/","title":"Source"},{"location":"TODO/#next-cycle","text":"","title":"Next Cycle"},{"location":"TODO/#notesreminders","text":"must be possbile to disable MMUs CTRL for lines that must NEVER be shut-off","title":"Notes/Reminders"},{"location":"TODO/#possible-future-enhancements","text":"Add automated linting/formatting steps (e.g., shellcheck, yamllint, markdownlint) to the check-in process Add a step to check for outdated dependencies and update lock files as needed Integrate security checks (e.g., bandit for Python, npm audit for Node) before release Track and enforce test coverage, ensuring new code is coveredeby tests Consider CI/CD for linting, spellcheck, and test coverage","title":"Possible Future Enhancements"},{"location":"api/","text":"Component: api \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/api.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:40 AM \u00b6 #------------------------------------------------------------------------------ # File: api.yaml # File Type: ESPHome YAML Include # Purpose: Common ESPHome API subsystem configuration # Version: 0.7.1 # Date: 2025-07-29 # Author: GitHub Copilot <your-email> # # Description: API configuration for ESPHome nodes, enabling Home Assistant # integration, remote logging, and secure communication. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. #------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # Enables Home Assistant API integration and remote logging # - Password is loaded from the secrets file for security # - Encryption key can be set for secure communication # - Port can be changed (default: 6053) # - Reboot timeout can be set for auto-recovery # - Custom actions on client connect/disconnect # - Parameters: # password: API password (from secrets file) # port: API TCP port (default: 6053) # reboot_timeout: Time before reboot if disconnected (default: 15min) # encryption: Enable encryption (key from secrets file) # on_client_connected: Actions on client connect # on_client_disconnected: Actions on client disconnect # ------------------------------------------------------------------------------ api : port : 6053 # API TCP port (default: 6053) reboot_timeout : 10min # Reboot if HA disconnects for this long on_client_connected : - logger.log : \"Home Assistant connected via API\" - lambda : |- id(ha_connected) = true; on_client_disconnected : - logger.log : \"Home Assistant disconnected from API\" - lambda : |- id(ha_connected) = false;","title":"API"},{"location":"api/#component-api","text":"","title":"Component: api"},{"location":"api/#source-homerhendelgitpumphousebosscommonapiyaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/api.yaml"},{"location":"api/#generated-wed-jul-30-2025-10440-am","text":"#------------------------------------------------------------------------------ # File: api.yaml # File Type: ESPHome YAML Include # Purpose: Common ESPHome API subsystem configuration # Version: 0.7.1 # Date: 2025-07-29 # Author: GitHub Copilot <your-email> # # Description: API configuration for ESPHome nodes, enabling Home Assistant # integration, remote logging, and secure communication. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. #------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # Enables Home Assistant API integration and remote logging # - Password is loaded from the secrets file for security # - Encryption key can be set for secure communication # - Port can be changed (default: 6053) # - Reboot timeout can be set for auto-recovery # - Custom actions on client connect/disconnect # - Parameters: # password: API password (from secrets file) # port: API TCP port (default: 6053) # reboot_timeout: Time before reboot if disconnected (default: 15min) # encryption: Enable encryption (key from secrets file) # on_client_connected: Actions on client connect # on_client_disconnected: Actions on client disconnect # ------------------------------------------------------------------------------ api : port : 6053 # API TCP port (default: 6053) reboot_timeout : 10min # Reboot if HA disconnects for this long on_client_connected : - logger.log : \"Home Assistant connected via API\" - lambda : |- id(ha_connected) = true; on_client_disconnected : - logger.log : \"Home Assistant disconnected from API\" - lambda : |- id(ha_connected) = false;","title":"Generated: Wed, Jul 30, 2025 1:04:40 AM"},{"location":"display_pcf8574/","text":"Component: display_pcf8574 \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/display_pcf8574.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:40 AM \u00b6 ```yaml =============================================================================== \u00b6 File: display_pcf8574.yaml \u00b6 File Type: ESPHome YAML Include \u00b6 Purpose: LCD display (PCF8574 I2C backpack) configuration fragment \u00b6 Project: PumpHouseBoss \u00b6 Author: Roland Tembo Hendel rhendel@nexuslogic.com \u00b6 \u00b6 Description: I2C LCD display configuration for ESP32/ESP32-S3 using PCF8574 \u00b6 backpack. Supports 16x2 or 20x4 displays. Placeholders are \u00b6 replaced by the Makefile during build. \u00b6 \u00b6 License: GNU General Public License v3.0 \u00b6 SPDX-License-Identifier: GPL-3.0-or-later \u00b6 Copyright: (c) 2025 Roland Tembo Hendel \u00b6 This program is free software: you can redistribute it and/or \u00b6 modify it under the terms of the GNU General Public License. \u00b6 =============================================================================== \u00b6 ------------------------------------------------------------------------------ \u00b6 YAML linter configuration \u00b6 - Disables quoted-strings rule for improved readability \u00b6 - Ensures that string values do not require unnecessary quotes, improving \u00b6 readability and maintainability of the YAML configuration. \u00b6 ------------------------------------------------------------------------------ \u00b6 yamllint disable rule:quoted-strings \u00b6 ------------------------------------------------------------------------------ \u00b6 LCD Display (PCF8574 I2C Backpack) Configuration \u00b6 - Configures a character LCD display (16x2 or 20x4) using the PCF8574 I2C backpack \u00b6 - Parameters: \u00b6 platform: Display platform (lcd_pcf8574) \u00b6 dimensions: Display size (columns x rows, e.g., 20x4) \u00b6 address: I2C address of the PCF8574 (0x27 or 0x3F typical) \u00b6 lambda: Custom rendering logic for display content \u00b6 - Example usage: \u00b6 - Shows device name and firmware version centered on the display \u00b6 ------------------------------------------------------------------------------ \u00b6 display: - platform: lcd_pcf8574 dimensions: 20x4 address: 0x27 # or 0x3F, check your module lambda: |- it.print(0, 1, \"PumpHouseBoss Pro\"); it.printf(1, 2, \"FW Version: %s\", id(firmware_version).state.c_str());```","title":"Display PCF8574"},{"location":"display_pcf8574/#component-display_pcf8574","text":"","title":"Component: display_pcf8574"},{"location":"display_pcf8574/#source-homerhendelgitpumphousebosscommondisplay_pcf8574yaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/display_pcf8574.yaml"},{"location":"display_pcf8574/#generated-wed-jul-30-2025-10440-am","text":"```yaml","title":"Generated: Wed, Jul 30, 2025 1:04:40 AM"},{"location":"display_pcf8574/#_1","text":"","title":"==============================================================================="},{"location":"display_pcf8574/#file-display_pcf8574yaml","text":"","title":"File: display_pcf8574.yaml"},{"location":"display_pcf8574/#file-type-esphome-yaml-include","text":"","title":"File Type: ESPHome YAML Include"},{"location":"display_pcf8574/#purpose-lcd-display-pcf8574-i2c-backpack-configuration-fragment","text":"","title":"Purpose: LCD display (PCF8574 I2C backpack) configuration fragment"},{"location":"display_pcf8574/#project-pumphouseboss","text":"","title":"Project: PumpHouseBoss"},{"location":"display_pcf8574/#author-roland-tembo-hendel-rhendelnexuslogiccom","text":"","title":"Author: Roland Tembo Hendel &#114;&#104;&#101;&#110;&#100;&#101;&#108;&#64;&#110;&#101;&#120;&#117;&#115;&#108;&#111;&#103;&#105;&#99;&#46;&#99;&#111;&#109;"},{"location":"display_pcf8574/#_2","text":"","title":""},{"location":"display_pcf8574/#description-i2c-lcd-display-configuration-for-esp32esp32-s3-using-pcf8574","text":"","title":"Description: I2C LCD display configuration for ESP32/ESP32-S3 using PCF8574"},{"location":"display_pcf8574/#backpack-supports-16x2-or-20x4-displays-placeholders-are","text":"","title":"backpack. Supports 16x2 or 20x4 displays. Placeholders are"},{"location":"display_pcf8574/#replaced-by-the-makefile-during-build","text":"","title":"replaced by the Makefile during build."},{"location":"display_pcf8574/#_3","text":"","title":""},{"location":"display_pcf8574/#license-gnu-general-public-license-v30","text":"","title":"License: GNU General Public License v3.0"},{"location":"display_pcf8574/#spdx-license-identifier-gpl-30-or-later","text":"","title":"SPDX-License-Identifier: GPL-3.0-or-later"},{"location":"display_pcf8574/#copyright-c-2025-roland-tembo-hendel","text":"","title":"Copyright: (c) 2025 Roland Tembo Hendel"},{"location":"display_pcf8574/#this-program-is-free-software-you-can-redistribute-it-andor","text":"","title":"This program is free software: you can redistribute it and/or"},{"location":"display_pcf8574/#modify-it-under-the-terms-of-the-gnu-general-public-license","text":"","title":"modify it under the terms of the GNU General Public License."},{"location":"display_pcf8574/#_4","text":"","title":"==============================================================================="},{"location":"display_pcf8574/#-","text":"","title":"------------------------------------------------------------------------------"},{"location":"display_pcf8574/#yaml-linter-configuration","text":"","title":"YAML linter configuration"},{"location":"display_pcf8574/#-disables-quoted-strings-rule-for-improved-readability","text":"","title":"- Disables quoted-strings rule for improved readability"},{"location":"display_pcf8574/#-ensures-that-string-values-do-not-require-unnecessary-quotes-improving","text":"","title":"- Ensures that string values do not require unnecessary quotes, improving"},{"location":"display_pcf8574/#readability-and-maintainability-of-the-yaml-configuration","text":"","title":"readability and maintainability of the YAML configuration."},{"location":"display_pcf8574/#-_1","text":"","title":"------------------------------------------------------------------------------"},{"location":"display_pcf8574/#yamllint-disable-rulequoted-strings","text":"","title":"yamllint disable rule:quoted-strings"},{"location":"display_pcf8574/#-_2","text":"","title":"------------------------------------------------------------------------------"},{"location":"display_pcf8574/#lcd-display-pcf8574-i2c-backpack-configuration","text":"","title":"LCD Display (PCF8574 I2C Backpack) Configuration"},{"location":"display_pcf8574/#-configures-a-character-lcd-display-16x2-or-20x4-using-the-pcf8574-i2c-backpack","text":"","title":"- Configures a character LCD display (16x2 or 20x4) using the PCF8574 I2C backpack"},{"location":"display_pcf8574/#-parameters","text":"","title":"- Parameters:"},{"location":"display_pcf8574/#platform-display-platform-lcd_pcf8574","text":"","title":"platform: Display platform (lcd_pcf8574)"},{"location":"display_pcf8574/#dimensions-display-size-columns-x-rows-eg-20x4","text":"","title":"dimensions: Display size (columns x rows, e.g., 20x4)"},{"location":"display_pcf8574/#address-i2c-address-of-the-pcf8574-0x27-or-0x3f-typical","text":"","title":"address: I2C address of the PCF8574 (0x27 or 0x3F typical)"},{"location":"display_pcf8574/#lambda-custom-rendering-logic-for-display-content","text":"","title":"lambda: Custom rendering logic for display content"},{"location":"display_pcf8574/#-example-usage","text":"","title":"- Example usage:"},{"location":"display_pcf8574/#-shows-device-name-and-firmware-version-centered-on-the-display","text":"","title":"- Shows device name and firmware version centered on the display"},{"location":"display_pcf8574/#-_3","text":"display: - platform: lcd_pcf8574 dimensions: 20x4 address: 0x27 # or 0x3F, check your module lambda: |- it.print(0, 1, \"PumpHouseBoss Pro\"); it.printf(1, 2, \"FW Version: %s\", id(firmware_version).state.c_str());```","title":"------------------------------------------------------------------------------"},{"location":"display_st7789/","text":"Component: display_st7789 \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/display_st7789.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:40 AM \u00b6 # ------------------------------------------------------------------------------ # File: display_st7789.yaml # File Type: ESPHome YAML Include # Purpose: Waveshare Pico LCD 1.3\" Display Module subsystem configuration # Version: 0.7.0 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Configuration for 240x240 pixel IPS display, 4 buttons, joystick, # ST7789V driver, SPI interface, and rPi Pico compatibility. # # Features: - 240x240 pixel display, IPS, 65k RGB color # - 4 momentary buttons (A, B, X, Y) # - 4-way joystick with select button # - ST7789V display driver support # - SPI interface for communication # - rPi Pico Pin compatibility # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # Waveshare Pico-LCD-1.3 Display Standard Pinout Map (Vertical, Top View) # ------------------------------------------------------------------------------ # # \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 # VBUS \u2500\u2524 40 01 \u251c\u2500 NC # VSYS \u2500\u2524 39 \u2554\u2550\u2550\u2557 02 \u251c\u2500 NC # GND \u2500\u2524 38 \u2554\u2550\u2550\u255d \u255a\u2550\u2550\u2557 03 \u251c\u2500 GND # NC \u2500\u2524 37 \u255a\u2550\u2550\u2557 \u2554\u2550\u2550\u255d 04 \u251c\u2500 JOY_UP # NC \u2500\u2524 36 \u255a\u2550\u2550\u255d 05 \u251c\u2500 JOY_IN # NC \u2500\u2524 35 06 \u251c\u2500 NC # NC \u2500\u2524 34 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 07 \u251c\u2500 NC # GND \u2500\u2524 33 \u2502 \u2502 08 \u251c\u2500 GND # NC \u2500\u2524 32 \u2502 \u2502 09 \u251c\u2500 NC # NC \u2500\u2524 31 \u2502 Waveshare\u2122 \u2502 10 \u251c\u2500 NC # NC \u2500\u2524 30 \u2502 Pico-LCD \u2502 11 \u251c\u2500 DC # NC \u2500\u2524 29 \u2502 1.3\" \u2502 12 \u251c\u2500 CS # NC \u2500\u2524 28 \u2502 \u2502 13 \u251c\u2500 GND # BTN_Y \u2500\u2524 27 \u2502 \u2502 14 \u251c\u2500 CLK # JOY_RIGHT \u2500\u2524 26 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 15 \u251c\u2500 MOSI # BTN_X \u2500\u2524 25 16 \u251c\u2500 RST # JOY_DOWN \u2500\u2524 24 17 \u251c\u2500 BL # GND \u2500\u2524 23 \u250c\u2500\u2510\u250c\u2500\u2510\u250c\u2500\u2510\u250c\u2500\u2510 18 \u251c\u2500 GND # BTN_B \u2500\u2524 22 \u2514\u2500\u2518\u2514\u2500\u2518\u2514\u2500\u2518\u2514\u2500\u2518 19 \u251c\u2500 NC # JOY_LEFT \u2500\u2524 21 Y X B A 20 \u251c\u2500 BTN_A # \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 # # Notes: # - pin 40, VBUS; 5 VDC # - pin 39, VSYS; NC # - pin 11, DC; Data/Command - high for data, low for command) # - pin 12, CS; Chip Select - active low # - pin 16, RST; Reset - active low # - pin 17, BL; Backlight - active high # # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # Font used for on-screen display # - Loads Google Noto Sans Mono font for display text # - Sets font size for UI elements # - Parameters: # file: Font file or URL # id: Font ID for reference # size: Font size in points # ------------------------------------------------------------------------------ font : - file : gfonts://Noto Sans Mono id : st7789_font size : 22 # ------------------------------------------------------------------------------ # Status icon images # - Loads PNG images for status and WiFi signal icons # - Used for UI status bar and indicators # - Parameters: # file: Path to image file # id: Image ID for reference # type: Image color type (e.g., RGB) # resize: Resize dimensions (pixels) # ------------------------------------------------------------------------------ image : # Status icons - file : \"icons/status_ok.png\" id : status_ok_icon type : RGB resize : 32x32 - file : \"icons/status_warn.png\" id : status_warn_icon type : RGB resize : 32x32 - file : \"icons/status_error.png\" id : status_error_icon type : RGB resize : 32x32 # WiFi signal icons - file : \"icons/wifi_0.png\" id : wifi_0_icon type : RGB resize : 32x32 - file : \"icons/wifi_1.png\" id : wifi_1_icon type : RGB resize : 32x32 - file : \"icons/wifi_2.png\" id : wifi_2_icon type : RGB resize : 32x32 - file : \"icons/wifi_3.png\" id : wifi_3_icon type : RGB resize : 32x32 - file : \"icons/wifi_4.png\" id : wifi_4_icon type : RGB resize : 32x32 # ------------------------------------------------------------------------------ # Text and sensor definitions # - Exposes WiFi info, hostname, date, and time as text sensors # - Provides template sensors for custom data # - Parameters (per sensor): # name: Sensor name # id: Sensor ID # lambda: Lambda function for value # update_interval: Update frequency # ------------------------------------------------------------------------------ text_sensor : - platform : wifi_info ip_address : name : \"WiFi IP Address\" id : ip_address ssid : name : \"WiFi SSID\" id : ssid mac_address : name : \"WiFi MAC Address\" id : mac_address - platform : template name : \"Hostname\" id : hostname lambda : |- return App.get_name(); update_interval : 60s - platform : template name : \"Current Date\" id : current_date # Returns the current date as YYYY-MM-DD lambda : |- char str[16]; time_t now = ::time(nullptr); strftime(str, sizeof(str), \"%Y-%m-%d\", localtime(&now)); return std::string(str); update_interval : 60s - platform : template name : \"Current Time\" id : current_time # Returns the current time as HH:MM:SS lambda : |- char str[16]; time_t now = ::time(nullptr); strftime(str, sizeof(str), \"%H:%M:%S\", localtime(&now)); return std::string(str); update_interval : 1s sensor : - platform : wifi_signal name : WiFi Signal Strength id : wifi_signal_strength update_interval : 60s # ------------------------------------------------------------------------------ # Display driver configuration block for ST7789V LCD # - Configures resolution, pinout, refresh rate, and UI rendering logic # - Includes dynamic rendering of flow rate sensor value # - Screen is cleared to teal and overlays two lines of text # - Parameters: # platform: Display platform (st7789v) # model: Display model (CUSTOM) # cs_pin: Chip select pin # dc_pin: Data/command pin # reset_pin: Reset line # width: Display width (pixels) # height: Display height (pixels) # update_interval: Refresh interval # data_rate: SPI clock frequency # ------------------------------------------------------------------------------ display : - platform : st7789v model : CUSTOM cs_pin : ${display_cs_pin} # cs_pin Chip select pin dc_pin : ${display_dc_pin} # dc_pin Data/command pin reset_pin : ${display_reset_pin} # reset_pin Reset line width : 240 height : 240 offset_width : 0 offset_height : 0 rotation : 0 update_interval : 1s # update_interval Refresh every second data_rate : 2MHz # data_rate SPI clock frequency auto_clear_enabled : false lambda : |- // Colors auto white = Color(255, 255, 255); auto blue = Color(0, 0, 255); auto teal = Color(0, 128, 128); auto black = Color(0, 0, 0); // establish status pane it.rectangle(0, 0, 239, 39, white); // establish data pane it.filled_rectangle(0, 40, 239, 239, blue); it.rectangle(0, 40, 239, 239, white); // Draw status_ok icon at (4,4) in the status bar it.image(4, 4, id(status_ok_icon)); // TODO: add logic to determine which status icon to use // Draw WiFi icons (Testing) it.image(204, 4, id(wifi_4_icon)); // TODO: add logic to determine which WiFi icon to use // Display device info in the data pane int y = 56; int line_height = 32; // Estimate average character width for Noto Sans Mono 22pt const int char_width = 12; std::string hostname_str = id(hostname).state; int x = (240 - (hostname_str.length() * char_width)) / 2; it.printf(x, y, id(st7789_font), white, \"%s\", hostname_str.c_str()); y += line_height; std::string ssid_str = id(ssid).state.empty() ? std::string(\"SSID: N/A\") : id(ssid).state; x = (240 - (ssid_str.length() * char_width)) / 2; it.printf(x, y, id(st7789_font), white, \"%s\", ssid_str.c_str()); y += line_height; std::string ip_str = id(ip_address).state.empty() ? std::string(\"IP: N/A\") : id(ip_address).state; x = (240 - (ip_str.length() * char_width)) / 2; it.printf(x, y, id(st7789_font), white, \"%s\", ip_str.c_str()); y += line_height; std::string mac_str = id(mac_address).state.empty() ? std::string(\"MAC: N/A\") : id(mac_address).state; x = (240 - (mac_str.length() * char_width)) / 2; it.printf(x, y, id(st7789_font), white, \"%s\", mac_str.c_str());","title":"Display"},{"location":"display_st7789/#component-display_st7789","text":"","title":"Component: display_st7789"},{"location":"display_st7789/#source-homerhendelgitpumphousebosscommondisplay_st7789yaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/display_st7789.yaml"},{"location":"display_st7789/#generated-wed-jul-30-2025-10440-am","text":"# ------------------------------------------------------------------------------ # File: display_st7789.yaml # File Type: ESPHome YAML Include # Purpose: Waveshare Pico LCD 1.3\" Display Module subsystem configuration # Version: 0.7.0 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Configuration for 240x240 pixel IPS display, 4 buttons, joystick, # ST7789V driver, SPI interface, and rPi Pico compatibility. # # Features: - 240x240 pixel display, IPS, 65k RGB color # - 4 momentary buttons (A, B, X, Y) # - 4-way joystick with select button # - ST7789V display driver support # - SPI interface for communication # - rPi Pico Pin compatibility # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # Waveshare Pico-LCD-1.3 Display Standard Pinout Map (Vertical, Top View) # ------------------------------------------------------------------------------ # # \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 # VBUS \u2500\u2524 40 01 \u251c\u2500 NC # VSYS \u2500\u2524 39 \u2554\u2550\u2550\u2557 02 \u251c\u2500 NC # GND \u2500\u2524 38 \u2554\u2550\u2550\u255d \u255a\u2550\u2550\u2557 03 \u251c\u2500 GND # NC \u2500\u2524 37 \u255a\u2550\u2550\u2557 \u2554\u2550\u2550\u255d 04 \u251c\u2500 JOY_UP # NC \u2500\u2524 36 \u255a\u2550\u2550\u255d 05 \u251c\u2500 JOY_IN # NC \u2500\u2524 35 06 \u251c\u2500 NC # NC \u2500\u2524 34 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 07 \u251c\u2500 NC # GND \u2500\u2524 33 \u2502 \u2502 08 \u251c\u2500 GND # NC \u2500\u2524 32 \u2502 \u2502 09 \u251c\u2500 NC # NC \u2500\u2524 31 \u2502 Waveshare\u2122 \u2502 10 \u251c\u2500 NC # NC \u2500\u2524 30 \u2502 Pico-LCD \u2502 11 \u251c\u2500 DC # NC \u2500\u2524 29 \u2502 1.3\" \u2502 12 \u251c\u2500 CS # NC \u2500\u2524 28 \u2502 \u2502 13 \u251c\u2500 GND # BTN_Y \u2500\u2524 27 \u2502 \u2502 14 \u251c\u2500 CLK # JOY_RIGHT \u2500\u2524 26 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 15 \u251c\u2500 MOSI # BTN_X \u2500\u2524 25 16 \u251c\u2500 RST # JOY_DOWN \u2500\u2524 24 17 \u251c\u2500 BL # GND \u2500\u2524 23 \u250c\u2500\u2510\u250c\u2500\u2510\u250c\u2500\u2510\u250c\u2500\u2510 18 \u251c\u2500 GND # BTN_B \u2500\u2524 22 \u2514\u2500\u2518\u2514\u2500\u2518\u2514\u2500\u2518\u2514\u2500\u2518 19 \u251c\u2500 NC # JOY_LEFT \u2500\u2524 21 Y X B A 20 \u251c\u2500 BTN_A # \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 # # Notes: # - pin 40, VBUS; 5 VDC # - pin 39, VSYS; NC # - pin 11, DC; Data/Command - high for data, low for command) # - pin 12, CS; Chip Select - active low # - pin 16, RST; Reset - active low # - pin 17, BL; Backlight - active high # # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # Font used for on-screen display # - Loads Google Noto Sans Mono font for display text # - Sets font size for UI elements # - Parameters: # file: Font file or URL # id: Font ID for reference # size: Font size in points # ------------------------------------------------------------------------------ font : - file : gfonts://Noto Sans Mono id : st7789_font size : 22 # ------------------------------------------------------------------------------ # Status icon images # - Loads PNG images for status and WiFi signal icons # - Used for UI status bar and indicators # - Parameters: # file: Path to image file # id: Image ID for reference # type: Image color type (e.g., RGB) # resize: Resize dimensions (pixels) # ------------------------------------------------------------------------------ image : # Status icons - file : \"icons/status_ok.png\" id : status_ok_icon type : RGB resize : 32x32 - file : \"icons/status_warn.png\" id : status_warn_icon type : RGB resize : 32x32 - file : \"icons/status_error.png\" id : status_error_icon type : RGB resize : 32x32 # WiFi signal icons - file : \"icons/wifi_0.png\" id : wifi_0_icon type : RGB resize : 32x32 - file : \"icons/wifi_1.png\" id : wifi_1_icon type : RGB resize : 32x32 - file : \"icons/wifi_2.png\" id : wifi_2_icon type : RGB resize : 32x32 - file : \"icons/wifi_3.png\" id : wifi_3_icon type : RGB resize : 32x32 - file : \"icons/wifi_4.png\" id : wifi_4_icon type : RGB resize : 32x32 # ------------------------------------------------------------------------------ # Text and sensor definitions # - Exposes WiFi info, hostname, date, and time as text sensors # - Provides template sensors for custom data # - Parameters (per sensor): # name: Sensor name # id: Sensor ID # lambda: Lambda function for value # update_interval: Update frequency # ------------------------------------------------------------------------------ text_sensor : - platform : wifi_info ip_address : name : \"WiFi IP Address\" id : ip_address ssid : name : \"WiFi SSID\" id : ssid mac_address : name : \"WiFi MAC Address\" id : mac_address - platform : template name : \"Hostname\" id : hostname lambda : |- return App.get_name(); update_interval : 60s - platform : template name : \"Current Date\" id : current_date # Returns the current date as YYYY-MM-DD lambda : |- char str[16]; time_t now = ::time(nullptr); strftime(str, sizeof(str), \"%Y-%m-%d\", localtime(&now)); return std::string(str); update_interval : 60s - platform : template name : \"Current Time\" id : current_time # Returns the current time as HH:MM:SS lambda : |- char str[16]; time_t now = ::time(nullptr); strftime(str, sizeof(str), \"%H:%M:%S\", localtime(&now)); return std::string(str); update_interval : 1s sensor : - platform : wifi_signal name : WiFi Signal Strength id : wifi_signal_strength update_interval : 60s # ------------------------------------------------------------------------------ # Display driver configuration block for ST7789V LCD # - Configures resolution, pinout, refresh rate, and UI rendering logic # - Includes dynamic rendering of flow rate sensor value # - Screen is cleared to teal and overlays two lines of text # - Parameters: # platform: Display platform (st7789v) # model: Display model (CUSTOM) # cs_pin: Chip select pin # dc_pin: Data/command pin # reset_pin: Reset line # width: Display width (pixels) # height: Display height (pixels) # update_interval: Refresh interval # data_rate: SPI clock frequency # ------------------------------------------------------------------------------ display : - platform : st7789v model : CUSTOM cs_pin : ${display_cs_pin} # cs_pin Chip select pin dc_pin : ${display_dc_pin} # dc_pin Data/command pin reset_pin : ${display_reset_pin} # reset_pin Reset line width : 240 height : 240 offset_width : 0 offset_height : 0 rotation : 0 update_interval : 1s # update_interval Refresh every second data_rate : 2MHz # data_rate SPI clock frequency auto_clear_enabled : false lambda : |- // Colors auto white = Color(255, 255, 255); auto blue = Color(0, 0, 255); auto teal = Color(0, 128, 128); auto black = Color(0, 0, 0); // establish status pane it.rectangle(0, 0, 239, 39, white); // establish data pane it.filled_rectangle(0, 40, 239, 239, blue); it.rectangle(0, 40, 239, 239, white); // Draw status_ok icon at (4,4) in the status bar it.image(4, 4, id(status_ok_icon)); // TODO: add logic to determine which status icon to use // Draw WiFi icons (Testing) it.image(204, 4, id(wifi_4_icon)); // TODO: add logic to determine which WiFi icon to use // Display device info in the data pane int y = 56; int line_height = 32; // Estimate average character width for Noto Sans Mono 22pt const int char_width = 12; std::string hostname_str = id(hostname).state; int x = (240 - (hostname_str.length() * char_width)) / 2; it.printf(x, y, id(st7789_font), white, \"%s\", hostname_str.c_str()); y += line_height; std::string ssid_str = id(ssid).state.empty() ? std::string(\"SSID: N/A\") : id(ssid).state; x = (240 - (ssid_str.length() * char_width)) / 2; it.printf(x, y, id(st7789_font), white, \"%s\", ssid_str.c_str()); y += line_height; std::string ip_str = id(ip_address).state.empty() ? std::string(\"IP: N/A\") : id(ip_address).state; x = (240 - (ip_str.length() * char_width)) / 2; it.printf(x, y, id(st7789_font), white, \"%s\", ip_str.c_str()); y += line_height; std::string mac_str = id(mac_address).state.empty() ? std::string(\"MAC: N/A\") : id(mac_address).state; x = (240 - (mac_str.length() * char_width)) / 2; it.printf(x, y, id(st7789_font), white, \"%s\", mac_str.c_str());","title":"Generated: Wed, Jul 30, 2025 1:04:40 AM"},{"location":"esp32/","text":"Component: esp32 \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/esp32.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:41 AM \u00b6 # ------------------------------------------------------------------------------ # File: esp32.yaml # File Type: ESPHome YAML Include # Purpose: ESP32 board and framework configuration # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Modular include for ESPHome projects targeting ESP32-S3. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # ESP32 (30 Pin Package) Dev Module standard Pinout Map (Vertical, Top View) # ------------------------------------------------------------------------------ # # \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 # EN \u2500\u2524 01 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 30 \u251c\u2500 GPIO23 SPI_MOSI VSPI_MOSI # VP ADC1_CH0 GPIO36 \u2500\u2524 02 \u2502 \u2502 29 \u251c\u2500 GPIO22 I2C_SCL # VN ADC1_CH3 GPIO39 \u2500\u2524 03 \u2502 \u2502 28 \u251c\u2500 GPIO01 U0TXD CLK3 # ADC1_CH6 GPIO34 \u2500\u2524 04 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 27 \u251c\u2500 GPIO03 U0RXD CLK2 # ADC1_CH7 GPIO35 \u2500\u2524 05 26 \u251c\u2500 GPIO21 I2C_SDA # XTAL32 TOUCH9 ADC1_CH4 GPIO32 \u2500\u2524 06 25 \u251c\u2500 GPIO19 SPI_MISO VSPI_MISO # TOUCH8 ADC1_CH5 GPIO33 \u2500\u2524 07 24 \u251c\u2500 GPIO18 SPI_SCK VSPI_CLK # DAC1 ADC2_CH8 GPIO25 \u2500\u2524 08 ESP-32 23 \u251c\u2500 GPIO05 VSPI_CS # DAC2 ADC2_CH9 GPIO26 \u2500\u2524 09 22 \u251c\u2500 GPIO17 U2TXD # TOUCH7 ADC2_CH7 GPIO27 \u2500\u2524 10 21 \u251c\u2500 GPIO16 U2RXD # HSPI_CLK TOUCH6 ADC2_CH6 GPIO14 \u2500\u2524 11 20 \u251c\u2500 GPIO04 ADC2_CH0 TOUCH0 # HSPI_MISO TOUCH5 ADC2_CH5 GPIO12 \u2500\u2524 12 19 \u251c\u2500 GPIO02 ADC2_CH2 TOUCH2 SPI_CS # HSPI_MOSI TOUCH4 ADC2_CH4 GPIO13 \u2500\u2524 13 18 \u251c\u2500 GPIO15 ADC2_CH3 TOUCH3 HSPI_CS # GND \u2500\u2524 14 17 \u251c\u2500 GND # 5V VIN \u2500\u2524 15 16 \u251c\u2500 VCC 3.3V # \u2514\u2500\u2500\u2500\u2500\u2500\u2500USB\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 # # Notes: # - GPIO6-11 are used for SPI flash and are not available for user IO # - GPIO1 (TX0), GPIO3 (RX0) are UART0 (serial console) pins # - can be repurposed if not using serial, but be careful # if you need serial logging or programming # - GPIO2 is a strapping pin; must be low at boot for some modules # - this pin should not be pulled high or low at boot/reset # - avoid using for output that could interfere with boot # - GPIO5 is a strapping pin; must be high at boot # - this pin should not be pulled low at boot/reset # - avoid using for output or with pull-ups # - GPIO3 is Rx pin for flashing/debugging # - GPIO12 is a strapping pin; high at boot selects high voltage for flash # - this pin should not be pulled high or low at boot/reset # - avoid using for output or with pull-ups # - GPIO15 is a strapping pin; must be low at boot # - this pin should not be pulled high or low at boot/reset # - avoid using for output or with pull-ups # - GPIO16, GPIO17 is used for PSRAM on some modules # - check your board\u2019s datasheet before using # - GPIO20, GPIO24 is not available on most ESP32 modules # - GPIO34-GPIO39 are input only # - not all pins are available on all modules; check your board's datasheet # - see ESP32 datasheet for full alternate functions # # ESP32 Datasheet: # https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf # # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # Target ESP32 board and Arduino framework declaration # - board: Target ESP32 Dev Module (ESP-WROOM-32) # - framework: Arduino core for ESP32 # - Parameters: # board: Target board (e.g., esp32dev) # framework.type: Framework type (e.g., arduino) # ------------------------------------------------------------------------------ esp32 : board : esp32dev # board Target board: ESP32 Dev Module (ESP-WROOM-32) framework : type : arduino # framework.type Arduino core for ESP32 # ------------------------------------------------------------------------------ # SPI bus configuration for ST7789V display module # - Configures SPI bus for display communication # - Assigns clock and MOSI pins # - Parameters: # clk_pin: Clock pin for SPI # mosi_pin: MOSI data pin # ------------------------------------------------------------------------------ spi : clk_pin : GPIO18 # clk_pin Clock pin for SPI mosi_pin : GPIO23 # param mosi_pin MOSI data pin # ------------------------------------------------------------------------------ # Display Interface Configuration # - Configures GPIO pins for display communication # - Assigns Chip Select, Data/Command, and Reset pins # - Parameters: # display_cs: pin Chip Select pin # display_dc: pin Data/Command pin # display_reset: pin Reset pin # ------------------------------------------------------------------------------ substitutions : display_cs_pin : \"GPIO13\" # cs_pin Chip select pin display_dc_pin : \"GPIO04\" # dc_pin Data/command pin display_reset_pin : \"GPIO17\" # reset_pin Reset line","title":"esp32"},{"location":"esp32/#component-esp32","text":"","title":"Component: esp32"},{"location":"esp32/#source-homerhendelgitpumphousebosscommonesp32yaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/esp32.yaml"},{"location":"esp32/#generated-wed-jul-30-2025-10441-am","text":"# ------------------------------------------------------------------------------ # File: esp32.yaml # File Type: ESPHome YAML Include # Purpose: ESP32 board and framework configuration # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Modular include for ESPHome projects targeting ESP32-S3. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # ESP32 (30 Pin Package) Dev Module standard Pinout Map (Vertical, Top View) # ------------------------------------------------------------------------------ # # \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 # EN \u2500\u2524 01 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 30 \u251c\u2500 GPIO23 SPI_MOSI VSPI_MOSI # VP ADC1_CH0 GPIO36 \u2500\u2524 02 \u2502 \u2502 29 \u251c\u2500 GPIO22 I2C_SCL # VN ADC1_CH3 GPIO39 \u2500\u2524 03 \u2502 \u2502 28 \u251c\u2500 GPIO01 U0TXD CLK3 # ADC1_CH6 GPIO34 \u2500\u2524 04 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 27 \u251c\u2500 GPIO03 U0RXD CLK2 # ADC1_CH7 GPIO35 \u2500\u2524 05 26 \u251c\u2500 GPIO21 I2C_SDA # XTAL32 TOUCH9 ADC1_CH4 GPIO32 \u2500\u2524 06 25 \u251c\u2500 GPIO19 SPI_MISO VSPI_MISO # TOUCH8 ADC1_CH5 GPIO33 \u2500\u2524 07 24 \u251c\u2500 GPIO18 SPI_SCK VSPI_CLK # DAC1 ADC2_CH8 GPIO25 \u2500\u2524 08 ESP-32 23 \u251c\u2500 GPIO05 VSPI_CS # DAC2 ADC2_CH9 GPIO26 \u2500\u2524 09 22 \u251c\u2500 GPIO17 U2TXD # TOUCH7 ADC2_CH7 GPIO27 \u2500\u2524 10 21 \u251c\u2500 GPIO16 U2RXD # HSPI_CLK TOUCH6 ADC2_CH6 GPIO14 \u2500\u2524 11 20 \u251c\u2500 GPIO04 ADC2_CH0 TOUCH0 # HSPI_MISO TOUCH5 ADC2_CH5 GPIO12 \u2500\u2524 12 19 \u251c\u2500 GPIO02 ADC2_CH2 TOUCH2 SPI_CS # HSPI_MOSI TOUCH4 ADC2_CH4 GPIO13 \u2500\u2524 13 18 \u251c\u2500 GPIO15 ADC2_CH3 TOUCH3 HSPI_CS # GND \u2500\u2524 14 17 \u251c\u2500 GND # 5V VIN \u2500\u2524 15 16 \u251c\u2500 VCC 3.3V # \u2514\u2500\u2500\u2500\u2500\u2500\u2500USB\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 # # Notes: # - GPIO6-11 are used for SPI flash and are not available for user IO # - GPIO1 (TX0), GPIO3 (RX0) are UART0 (serial console) pins # - can be repurposed if not using serial, but be careful # if you need serial logging or programming # - GPIO2 is a strapping pin; must be low at boot for some modules # - this pin should not be pulled high or low at boot/reset # - avoid using for output that could interfere with boot # - GPIO5 is a strapping pin; must be high at boot # - this pin should not be pulled low at boot/reset # - avoid using for output or with pull-ups # - GPIO3 is Rx pin for flashing/debugging # - GPIO12 is a strapping pin; high at boot selects high voltage for flash # - this pin should not be pulled high or low at boot/reset # - avoid using for output or with pull-ups # - GPIO15 is a strapping pin; must be low at boot # - this pin should not be pulled high or low at boot/reset # - avoid using for output or with pull-ups # - GPIO16, GPIO17 is used for PSRAM on some modules # - check your board\u2019s datasheet before using # - GPIO20, GPIO24 is not available on most ESP32 modules # - GPIO34-GPIO39 are input only # - not all pins are available on all modules; check your board's datasheet # - see ESP32 datasheet for full alternate functions # # ESP32 Datasheet: # https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf # # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # Target ESP32 board and Arduino framework declaration # - board: Target ESP32 Dev Module (ESP-WROOM-32) # - framework: Arduino core for ESP32 # - Parameters: # board: Target board (e.g., esp32dev) # framework.type: Framework type (e.g., arduino) # ------------------------------------------------------------------------------ esp32 : board : esp32dev # board Target board: ESP32 Dev Module (ESP-WROOM-32) framework : type : arduino # framework.type Arduino core for ESP32 # ------------------------------------------------------------------------------ # SPI bus configuration for ST7789V display module # - Configures SPI bus for display communication # - Assigns clock and MOSI pins # - Parameters: # clk_pin: Clock pin for SPI # mosi_pin: MOSI data pin # ------------------------------------------------------------------------------ spi : clk_pin : GPIO18 # clk_pin Clock pin for SPI mosi_pin : GPIO23 # param mosi_pin MOSI data pin # ------------------------------------------------------------------------------ # Display Interface Configuration # - Configures GPIO pins for display communication # - Assigns Chip Select, Data/Command, and Reset pins # - Parameters: # display_cs: pin Chip Select pin # display_dc: pin Data/Command pin # display_reset: pin Reset pin # ------------------------------------------------------------------------------ substitutions : display_cs_pin : \"GPIO13\" # cs_pin Chip select pin display_dc_pin : \"GPIO04\" # dc_pin Data/command pin display_reset_pin : \"GPIO17\" # reset_pin Reset line","title":"Generated: Wed, Jul 30, 2025 1:04:41 AM"},{"location":"esp32s3/","text":"Component: esp32s3 \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/esp32s3.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:41 AM \u00b6 ```yaml ------------------------------------------------------------------------------ \u00b6 File: esp32s3.yaml \u00b6 File Type: ESPHome YAML Include \u00b6 Purpose: ESP32-S3 board and framework configuration \u00b6 Version: 0.7.1 \u00b6 Date: 2025-07-24 \u00b6 Author: Roland Tembo Hendel rhendel@nexuslogic.com \u00b6 \u00b6 Description: Modular include for ESPHome projects targeting ESP32-S3. \u00b6 \u00b6 License: GNU General Public License v3.0 \u00b6 SPDX-License-Identifier: GPL-3.0-or-later \u00b6 Copyright: (c) 2025 Roland Tembo Hendel \u00b6 This program is free software: you can redistribute it and/or \u00b6 modify it under the terms of the GNU General Public License. \u00b6 ------------------------------------------------------------------------------ \u00b6 ------------------------------------------------------------------------------ \u00b6 YAML linter configuration \u00b6 - Disables quoted-strings rule for improved readability \u00b6 ------------------------------------------------------------------------------ \u00b6 yamllint disable rule:quoted-strings \u00b6 ------------------------------------------------------------------------------ \u00b6 ESP32-S3 (QFN44) Dev Module Standard Pinout Map (Vertical, Top View) \u00b6 ------------------------------------------------------------------------------ \u00b6 \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u00b6 3.3V VCC \u2500\u2524 01 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 44 \u251c\u2500\u2500 GND \u00b6 3.3V VCC \u2500\u2524 02 \u2502 \u2502 43 \u251c\u2500\u2500 GPIO43 U0TXD LED_TX \u00b6 RST \u2500\u2524 03 \u2502 \u2502 42 \u251c\u2500\u2500 GPIO44 U0RXD LED_RX \u00b6 T04 ADC1_CH3 CAM_SIOD GPIO04 \u2500\u2524 04 \u2502 \u2502 41 \u251c\u2500\u2500 GPIO01, ADC1_CH0 T01 \u00b6 T05 ADC1_CH4 CAM_SIOC GPIO05 \u2500\u2524 05 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 40 \u251c\u2500\u2500 GPIO02 ADC1_CH1 LED_ON T02 \u00b6 T06 ADC1_CH5 CAM_VSYNC GPIO06 \u2500\u2524 06 39 \u251c\u2500\u2500 GPIO42 MTMS \u00b6 T07 ADC1_CH6 CAM_HREF GPIO07 \u2500\u2524 07 38 \u251c\u2500\u2500 GPIO41 MTD1 \u00b6 U0RTS ADC2_CH4 CAM_XCLK GPIO15 \u2500\u2524 08 37 \u251c\u2500\u2500 GPIO40 SD_DATA MTDO \u00b6 U0CTS ADC2_CH5 CAM_Y9 GPIO16 \u2500\u2524 09 36 \u251c\u2500\u2500 GPIO39 SD_CLK MTCK \u00b6 U1TXD ADC2_CH6 CAM_Y8 GPIO17 \u2500\u2524 10 35 \u251c\u2500\u2500 GPIO38 SD_CMD \u00b6 U1RXD ADC2_CH7 CAM_Y7 GPIO18 \u2500\u2524 11 ESP32-S3 34 \u251c\u2500\u2500 GPIO37 PSRAM \u00b6 T08 ADC1_CH7 CAM_Y4 GPIO08 \u2500\u2524 12 33 \u251c\u2500\u2500 GPIO36 PSRAM \u00b6 T03 ADC1_CH2 JTAG_EN GPIO03 \u2500\u2524 13 32 \u251c\u2500\u2500 GPIO35 PSRAM \u00b6 LOG GPIO46 \u2500\u2524 14 31 \u251c\u2500\u2500 GPIO00 BOOT \u00b6 T09 ADC1_CH8 CAM_Y3 GPIO09 \u2500\u2524 15 30 \u251c\u2500\u2500 GPIO45 VSPI \u00b6 T10 ADC1_CH9 CAM_Y5 GPIO10 \u2500\u2524 16 29 \u251c\u2500\u2500 GPIO48 WS2812 \u00b6 T11 ADC2_CH0 CAM_Y2 GPIO11 \u2500\u2524 17 28 \u251c\u2500\u2500 GPIO47 \u00b6 T12 ADC2_CH1 CAM_Y6 GPIO12 \u2500\u2524 18 27 \u251c\u2500\u2500 GPIO21 \u00b6 T13 ADC2_CH2 CAM_PCLK GPIO13 \u2500\u2524 19 26 \u251c\u2500\u2500 GPIO20 USB_D- ADC2_CH9 U1CTS \u00b6 T14 ADC2_CH3 GPIO14 \u2500\u2524 20 25 \u251c\u2500\u2500 GPIO19 USB_D+ ADC2_CH8 U1RTS \u00b6 5V VIN \u2500\u2524 21 24 \u251c\u2500\u2500 GND \u00b6 GND \u2500\u2524 22 23 \u251c\u2500\u2500 GND \u00b6 \u2514\u2500\u2500\u2500\u2510USB\u250c\u2500\u2510USB\u250c\u2500\u2500\u2500\u2500\u2518 \u00b6 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u00b6 \u00b6 Notes: \u00b6 - pin numbers (1-44) match QFN44 package, not module/dev board \u00b6 - GPIO6-11 are typically used for SPI flash and not available for user IO \u00b6 - GPIO46 is input only \u00b6 - GPIO00, GPIO45, GPIO46 are strapping pins \u00b6 - these pins should not be pulled high or low at boot/reset \u00b6 - use with caution; avoid using as output or with pull-downs \u00b6 - GPIO1, GPIO3 are default UART0 pins (console) \u00b6 - can be repurposed if not used for serial \u00b6 - GPIO19, GPIO20, GPIO21 are USB D+/D- and related pins; \u00b6 - using them for other purposes can interfere with USB functionality \u00b6 - not all pins are available on all modules; check your board's datasheet \u00b6 - see ESP32-S3 datasheet for alternate functions and capabilities \u00b6 \u00b6 ------------------------------------------------------------------------------ \u00b6 ------------------------------------------------------------------------------ \u00b6 Target ESP32-S3 board and Arduino framework declaration \u00b6 - board: Target ESP32-S3 DevKitC-1 (8MB flash, no PSRAM) \u00b6 - framework: Arduino core for ESP32-S3 \u00b6 - Parameters: \u00b6 board: Target board (e.g., esp32-s3-devkitc-1) \u00b6 framework.type: Framework type (e.g., arduino) \u00b6 ------------------------------------------------------------------------------ \u00b6 esp32: board: esp32-s3-devkitc-1 # board Target board: DevKitC-1 (8MB flash, no PSRAM) framework: type: arduino # framework.type Arduino core for ESP32-S3 ------------------------------------------------------------------------------ \u00b6 SPI bus configuration \u00b6 - Configures SPI bus for communication \u00b6 - Assigns clock and MOSI pins \u00b6 - Parameters: \u00b6 clk_pin: Clock pin for SPI \u00b6 mosi_pin: MOSI data pin \u00b6 ------------------------------------------------------------------------------ \u00b6 spi: clk_pin: GPIO10 # clk_pin Clock pin for SPI mosi_pin: GPIO11 # param mosi_pin MOSI data pin ------------------------------------------------------------------------------ \u00b6 Display Interface Configuration \u00b6 - Configures GPIO pins for display communication \u00b6 - Assigns Chip Select, Data/Command, and Reset pins \u00b6 - Parameters: \u00b6 display_cs: pin Chip Select pin \u00b6 display_dc: pin Data/Command pin \u00b6 display_reset: pin Reset pin \u00b6 ------------------------------------------------------------------------------ \u00b6 substitutions: display_cs_pin: \"GPIO09\" # cs_pin Chip select pin display_dc_pin: \"GPIO08\" # dc_pin Data/command pin display_reset_pin: \"GPIO12\" # reset_pin Reset line```","title":"esp32s3"},{"location":"esp32s3/#component-esp32s3","text":"","title":"Component: esp32s3"},{"location":"esp32s3/#source-homerhendelgitpumphousebosscommonesp32s3yaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/esp32s3.yaml"},{"location":"esp32s3/#generated-wed-jul-30-2025-10441-am","text":"```yaml","title":"Generated: Wed, Jul 30, 2025 1:04:41 AM"},{"location":"esp32s3/#-","text":"","title":"------------------------------------------------------------------------------"},{"location":"esp32s3/#file-esp32s3yaml","text":"","title":"File: esp32s3.yaml"},{"location":"esp32s3/#file-type-esphome-yaml-include","text":"","title":"File Type: ESPHome YAML Include"},{"location":"esp32s3/#purpose-esp32-s3-board-and-framework-configuration","text":"","title":"Purpose: ESP32-S3 board and framework configuration"},{"location":"esp32s3/#version-071","text":"","title":"Version: 0.7.1"},{"location":"esp32s3/#date-2025-07-24","text":"","title":"Date: 2025-07-24"},{"location":"esp32s3/#author-roland-tembo-hendel-rhendelnexuslogiccom","text":"","title":"Author: Roland Tembo Hendel &#114;&#104;&#101;&#110;&#100;&#101;&#108;&#64;&#110;&#101;&#120;&#117;&#115;&#108;&#111;&#103;&#105;&#99;&#46;&#99;&#111;&#109;"},{"location":"esp32s3/#_1","text":"","title":""},{"location":"esp32s3/#description-modular-include-for-esphome-projects-targeting-esp32-s3","text":"","title":"Description: Modular include for ESPHome projects targeting ESP32-S3."},{"location":"esp32s3/#_2","text":"","title":""},{"location":"esp32s3/#license-gnu-general-public-license-v30","text":"","title":"License: GNU General Public License v3.0"},{"location":"esp32s3/#spdx-license-identifier-gpl-30-or-later","text":"","title":"SPDX-License-Identifier: GPL-3.0-or-later"},{"location":"esp32s3/#copyright-c-2025-roland-tembo-hendel","text":"","title":"Copyright: (c) 2025 Roland Tembo Hendel"},{"location":"esp32s3/#this-program-is-free-software-you-can-redistribute-it-andor","text":"","title":"This program is free software: you can redistribute it and/or"},{"location":"esp32s3/#modify-it-under-the-terms-of-the-gnu-general-public-license","text":"","title":"modify it under the terms of the GNU General Public License."},{"location":"esp32s3/#-_1","text":"","title":"------------------------------------------------------------------------------"},{"location":"esp32s3/#-_2","text":"","title":"------------------------------------------------------------------------------"},{"location":"esp32s3/#yaml-linter-configuration","text":"","title":"YAML linter configuration"},{"location":"esp32s3/#-disables-quoted-strings-rule-for-improved-readability","text":"","title":"- Disables quoted-strings rule for improved readability"},{"location":"esp32s3/#-_3","text":"","title":"------------------------------------------------------------------------------"},{"location":"esp32s3/#yamllint-disable-rulequoted-strings","text":"","title":"yamllint disable rule:quoted-strings"},{"location":"esp32s3/#-_4","text":"","title":"------------------------------------------------------------------------------"},{"location":"esp32s3/#esp32-s3-qfn44-dev-module-standard-pinout-map-vertical-top-view","text":"","title":"ESP32-S3 (QFN44) Dev Module Standard Pinout Map (Vertical, Top View)"},{"location":"esp32s3/#-_5","text":"","title":"------------------------------------------------------------------------------"},{"location":"esp32s3/#_3","text":"","title":""},{"location":"esp32s3/#_4","text":"","title":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510"},{"location":"esp32s3/#33v-vcc-01-44-gnd","text":"","title":"3.3V VCC \u2500\u2524 01 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 44 \u251c\u2500\u2500 GND"},{"location":"esp32s3/#33v-vcc-02-43-gpio43-u0txd-led_tx","text":"","title":"3.3V VCC \u2500\u2524 02 \u2502 \u2502 43 \u251c\u2500\u2500 GPIO43 U0TXD LED_TX"},{"location":"esp32s3/#rst-03-42-gpio44-u0rxd-led_rx","text":"","title":"RST \u2500\u2524 03 \u2502 \u2502 42 \u251c\u2500\u2500 GPIO44 U0RXD LED_RX"},{"location":"esp32s3/#t04-adc1_ch3-cam_siod-gpio04-04-41-gpio01-adc1_ch0-t01","text":"","title":"T04 ADC1_CH3 CAM_SIOD GPIO04 \u2500\u2524 04 \u2502 \u2502 41 \u251c\u2500\u2500 GPIO01, ADC1_CH0 T01"},{"location":"esp32s3/#t05-adc1_ch4-cam_sioc-gpio05-05-40-gpio02-adc1_ch1-led_on-t02","text":"","title":"T05 ADC1_CH4 CAM_SIOC GPIO05 \u2500\u2524 05 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 40 \u251c\u2500\u2500 GPIO02 ADC1_CH1 LED_ON T02"},{"location":"esp32s3/#t06-adc1_ch5-cam_vsync-gpio06-06-39-gpio42-mtms","text":"","title":"T06 ADC1_CH5 CAM_VSYNC GPIO06 \u2500\u2524 06 39 \u251c\u2500\u2500 GPIO42 MTMS"},{"location":"esp32s3/#t07-adc1_ch6-cam_href-gpio07-07-38-gpio41-mtd1","text":"","title":"T07 ADC1_CH6 CAM_HREF GPIO07 \u2500\u2524 07 38 \u251c\u2500\u2500 GPIO41 MTD1"},{"location":"esp32s3/#u0rts-adc2_ch4-cam_xclk-gpio15-08-37-gpio40-sd_data-mtdo","text":"","title":"U0RTS ADC2_CH4 CAM_XCLK GPIO15 \u2500\u2524 08 37 \u251c\u2500\u2500 GPIO40 SD_DATA MTDO"},{"location":"esp32s3/#u0cts-adc2_ch5-cam_y9-gpio16-09-36-gpio39-sd_clk-mtck","text":"","title":"U0CTS ADC2_CH5 CAM_Y9 GPIO16 \u2500\u2524 09 36 \u251c\u2500\u2500 GPIO39 SD_CLK MTCK"},{"location":"esp32s3/#u1txd-adc2_ch6-cam_y8-gpio17-10-35-gpio38-sd_cmd","text":"","title":"U1TXD ADC2_CH6 CAM_Y8 GPIO17 \u2500\u2524 10 35 \u251c\u2500\u2500 GPIO38 SD_CMD"},{"location":"esp32s3/#u1rxd-adc2_ch7-cam_y7-gpio18-11-esp32-s3-34-gpio37-psram","text":"","title":"U1RXD ADC2_CH7 CAM_Y7 GPIO18 \u2500\u2524 11 ESP32-S3 34 \u251c\u2500\u2500 GPIO37 PSRAM"},{"location":"esp32s3/#t08-adc1_ch7-cam_y4-gpio08-12-33-gpio36-psram","text":"","title":"T08 ADC1_CH7 CAM_Y4 GPIO08 \u2500\u2524 12 33 \u251c\u2500\u2500 GPIO36 PSRAM"},{"location":"esp32s3/#t03-adc1_ch2-jtag_en-gpio03-13-32-gpio35-psram","text":"","title":"T03 ADC1_CH2 JTAG_EN GPIO03 \u2500\u2524 13 32 \u251c\u2500\u2500 GPIO35 PSRAM"},{"location":"esp32s3/#log-gpio46-14-31-gpio00-boot","text":"","title":"LOG GPIO46 \u2500\u2524 14 31 \u251c\u2500\u2500 GPIO00 BOOT"},{"location":"esp32s3/#t09-adc1_ch8-cam_y3-gpio09-15-30-gpio45-vspi","text":"","title":"T09 ADC1_CH8 CAM_Y3 GPIO09 \u2500\u2524 15 30 \u251c\u2500\u2500 GPIO45 VSPI"},{"location":"esp32s3/#t10-adc1_ch9-cam_y5-gpio10-16-29-gpio48-ws2812","text":"","title":"T10 ADC1_CH9 CAM_Y5 GPIO10 \u2500\u2524 16 29 \u251c\u2500\u2500 GPIO48 WS2812"},{"location":"esp32s3/#t11-adc2_ch0-cam_y2-gpio11-17-28-gpio47","text":"","title":"T11 ADC2_CH0 CAM_Y2 GPIO11 \u2500\u2524 17 28 \u251c\u2500\u2500 GPIO47"},{"location":"esp32s3/#t12-adc2_ch1-cam_y6-gpio12-18-27-gpio21","text":"","title":"T12 ADC2_CH1 CAM_Y6 GPIO12 \u2500\u2524 18 27 \u251c\u2500\u2500 GPIO21"},{"location":"esp32s3/#t13-adc2_ch2-cam_pclk-gpio13-19-26-gpio20-usb_d-adc2_ch9-u1cts","text":"","title":"T13 ADC2_CH2 CAM_PCLK GPIO13 \u2500\u2524 19 26 \u251c\u2500\u2500 GPIO20 USB_D- ADC2_CH9 U1CTS"},{"location":"esp32s3/#t14-adc2_ch3-gpio14-20-25-gpio19-usb_d-adc2_ch8-u1rts","text":"","title":"T14 ADC2_CH3 GPIO14 \u2500\u2524 20 25 \u251c\u2500\u2500 GPIO19 USB_D+ ADC2_CH8 U1RTS"},{"location":"esp32s3/#5v-vin-21-24-gnd","text":"","title":"5V VIN \u2500\u2524 21 24 \u251c\u2500\u2500 GND"},{"location":"esp32s3/#gnd-22-23-gnd","text":"","title":"GND \u2500\u2524 22 23 \u251c\u2500\u2500 GND"},{"location":"esp32s3/#usbusb","text":"","title":"\u2514\u2500\u2500\u2500\u2510USB\u250c\u2500\u2510USB\u250c\u2500\u2500\u2500\u2500\u2518"},{"location":"esp32s3/#_5","text":"","title":"\u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518"},{"location":"esp32s3/#_6","text":"","title":""},{"location":"esp32s3/#notes","text":"","title":"Notes:"},{"location":"esp32s3/#-pin-numbers-1-44-match-qfn44-package-not-moduledev-board","text":"","title":"- pin numbers (1-44) match QFN44 package, not module/dev board"},{"location":"esp32s3/#-gpio6-11-are-typically-used-for-spi-flash-and-not-available-for-user-io","text":"","title":"- GPIO6-11 are typically used for SPI flash and not available for user IO"},{"location":"esp32s3/#-gpio46-is-input-only","text":"","title":"- GPIO46 is input only"},{"location":"esp32s3/#-gpio00-gpio45-gpio46-are-strapping-pins","text":"","title":"- GPIO00, GPIO45, GPIO46 are strapping pins"},{"location":"esp32s3/#-these-pins-should-not-be-pulled-high-or-low-at-bootreset","text":"","title":"- these pins should not be pulled high or low at boot/reset"},{"location":"esp32s3/#-use-with-caution-avoid-using-as-output-or-with-pull-downs","text":"","title":"- use with caution; avoid using as output or with pull-downs"},{"location":"esp32s3/#-gpio1-gpio3-are-default-uart0-pins-console","text":"","title":"- GPIO1, GPIO3 are default UART0 pins (console)"},{"location":"esp32s3/#-can-be-repurposed-if-not-used-for-serial","text":"","title":"- can be repurposed if not used for serial"},{"location":"esp32s3/#-gpio19-gpio20-gpio21-are-usb-dd-and-related-pins","text":"","title":"- GPIO19, GPIO20, GPIO21 are USB D+/D- and related pins;"},{"location":"esp32s3/#-using-them-for-other-purposes-can-interfere-with-usb-functionality","text":"","title":"- using them for other purposes can interfere with USB functionality"},{"location":"esp32s3/#-not-all-pins-are-available-on-all-modules-check-your-boards-datasheet","text":"","title":"- not all pins are available on all modules; check your board's datasheet"},{"location":"esp32s3/#-see-esp32-s3-datasheet-for-alternate-functions-and-capabilities","text":"","title":"- see ESP32-S3 datasheet for alternate functions and capabilities"},{"location":"esp32s3/#_7","text":"","title":""},{"location":"esp32s3/#-_6","text":"","title":"------------------------------------------------------------------------------"},{"location":"esp32s3/#-_7","text":"","title":"------------------------------------------------------------------------------"},{"location":"esp32s3/#target-esp32-s3-board-and-arduino-framework-declaration","text":"","title":"Target ESP32-S3 board and Arduino framework declaration"},{"location":"esp32s3/#-board-target-esp32-s3-devkitc-1-8mb-flash-no-psram","text":"","title":"- board: Target ESP32-S3 DevKitC-1 (8MB flash, no PSRAM)"},{"location":"esp32s3/#-framework-arduino-core-for-esp32-s3","text":"","title":"- framework: Arduino core for ESP32-S3"},{"location":"esp32s3/#-parameters","text":"","title":"- Parameters:"},{"location":"esp32s3/#board-target-board-eg-esp32-s3-devkitc-1","text":"","title":"board: Target board (e.g., esp32-s3-devkitc-1)"},{"location":"esp32s3/#frameworktype-framework-type-eg-arduino","text":"","title":"framework.type: Framework type (e.g., arduino)"},{"location":"esp32s3/#-_8","text":"esp32: board: esp32-s3-devkitc-1 # board Target board: DevKitC-1 (8MB flash, no PSRAM) framework: type: arduino # framework.type Arduino core for ESP32-S3","title":"------------------------------------------------------------------------------"},{"location":"esp32s3/#-_9","text":"","title":"------------------------------------------------------------------------------"},{"location":"esp32s3/#spi-bus-configuration","text":"","title":"SPI bus configuration"},{"location":"esp32s3/#-configures-spi-bus-for-communication","text":"","title":"- Configures SPI bus for communication"},{"location":"esp32s3/#-assigns-clock-and-mosi-pins","text":"","title":"- Assigns clock and MOSI pins"},{"location":"esp32s3/#-parameters_1","text":"","title":"- Parameters:"},{"location":"esp32s3/#clk_pin-clock-pin-for-spi","text":"","title":"clk_pin: Clock pin for SPI"},{"location":"esp32s3/#mosi_pin-mosi-data-pin","text":"","title":"mosi_pin: MOSI data pin"},{"location":"esp32s3/#-_10","text":"spi: clk_pin: GPIO10 # clk_pin Clock pin for SPI mosi_pin: GPIO11 # param mosi_pin MOSI data pin","title":"------------------------------------------------------------------------------"},{"location":"esp32s3/#-_11","text":"","title":"------------------------------------------------------------------------------"},{"location":"esp32s3/#display-interface-configuration","text":"","title":"Display Interface Configuration"},{"location":"esp32s3/#-configures-gpio-pins-for-display-communication","text":"","title":"- Configures GPIO pins for display communication"},{"location":"esp32s3/#-assigns-chip-select-datacommand-and-reset-pins","text":"","title":"- Assigns Chip Select, Data/Command, and Reset pins"},{"location":"esp32s3/#-parameters_2","text":"","title":"- Parameters:"},{"location":"esp32s3/#display_cs-pin-chip-select-pin","text":"","title":"display_cs: pin Chip Select pin"},{"location":"esp32s3/#display_dc-pin-datacommand-pin","text":"","title":"display_dc: pin Data/Command pin"},{"location":"esp32s3/#display_reset-pin-reset-pin","text":"","title":"display_reset: pin Reset pin"},{"location":"esp32s3/#-_12","text":"substitutions: display_cs_pin: \"GPIO09\" # cs_pin Chip select pin display_dc_pin: \"GPIO08\" # dc_pin Data/command pin display_reset_pin: \"GPIO12\" # reset_pin Reset line```","title":"------------------------------------------------------------------------------"},{"location":"indications/","text":"Component: indications \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/indications.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:41 AM \u00b6 # ------------------------------------------------------------------------------ # File: indications.yaml # File Type: ESPHome YAML Include # Purpose: System status LED driver/logic # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Drives 4 status LEDs for system state indication: # - White: Power/Status (blinks before boot, steady ON after boot) # - Green: WiFi (ON if connected, blinks if not) # - Blue: Home Assistant/API (ON if connected, blinks if not) # - Red: MMU/Alert (currently fast blink as placeholder) # Uses ESPHome interval and lambda logic for flexible, real-time # status indication. Pin assignments are set via substitutions. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # - Ensures that string values do not require unnecessary quotes, improving # readability and maintainability of the YAML configuration. # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # LED Indication Logic # - Drives 4 status LEDs (pins assigned via substitutions) # - Each LED is defined as a binary output # - LED logic is handled in a 500ms interval lambda block # ------------------------------------------------------------------------------ output : - platform : gpio id : led_power pin : ${led_power_pin} - platform : gpio id : led_wifi_status pin : ${led_wifi_status_pin} - platform : gpio id : led_host_status pin : ${led_host_status_pin} - platform : gpio id : led_mmu_status pin : ${led_mmu_status_pin} # ------------------------------------------------------------------------------ # LED Logic: # - White (Power/Status): # * Blinks before system boot # * Steady ON after boot # - Green (WiFi): # * ON if WiFi connected # * Blinks if not connected # - Blue (Home Assistant/API): # * ON if Home Assistant API connected # * Blinks if not connected # - Red (MMU/Alert): # * Fast blink (placeholder for future MMU/alert logic) # ------------------------------------------------------------------------------ interval : - interval : 500ms then : - lambda : |- // White LED (Power/Status): Blink before boot, steady ON after boot static bool white_blink = false; if (id(system_boot).state) { id(led_power).turn_on(); } else { white_blink = !white_blink; if (white_blink) id(led_power).turn_on(); else id(led_power).turn_off(); } // Green LED (WiFi): ON if connected, blink if not static bool green_blink = false; if (id(wifi_connected).state) { id(led_wifi_status).turn_on(); } else { green_blink = !green_blink; if (green_blink) id(led_wifi_status).turn_on(); else id(led_wifi_status).turn_off(); } // Blue LED (HA/API): ON if connected, blink if not static bool blue_blink = false; if (id(ha_connected)) { id(led_host_status).turn_on(); } else { blue_blink = !blue_blink; if (blue_blink) id(led_host_status).turn_on(); else id(led_host_status).turn_off(); } // Red LED: fast blink (placeholder) static bool red_state = false; red_state = !red_state; if (red_state) id(led_mmu_status).turn_on(); else id(led_mmu_status).turn_off();","title":"Indications"},{"location":"indications/#component-indications","text":"","title":"Component: indications"},{"location":"indications/#source-homerhendelgitpumphousebosscommonindicationsyaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/indications.yaml"},{"location":"indications/#generated-wed-jul-30-2025-10441-am","text":"# ------------------------------------------------------------------------------ # File: indications.yaml # File Type: ESPHome YAML Include # Purpose: System status LED driver/logic # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Drives 4 status LEDs for system state indication: # - White: Power/Status (blinks before boot, steady ON after boot) # - Green: WiFi (ON if connected, blinks if not) # - Blue: Home Assistant/API (ON if connected, blinks if not) # - Red: MMU/Alert (currently fast blink as placeholder) # Uses ESPHome interval and lambda logic for flexible, real-time # status indication. Pin assignments are set via substitutions. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # - Ensures that string values do not require unnecessary quotes, improving # readability and maintainability of the YAML configuration. # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # LED Indication Logic # - Drives 4 status LEDs (pins assigned via substitutions) # - Each LED is defined as a binary output # - LED logic is handled in a 500ms interval lambda block # ------------------------------------------------------------------------------ output : - platform : gpio id : led_power pin : ${led_power_pin} - platform : gpio id : led_wifi_status pin : ${led_wifi_status_pin} - platform : gpio id : led_host_status pin : ${led_host_status_pin} - platform : gpio id : led_mmu_status pin : ${led_mmu_status_pin} # ------------------------------------------------------------------------------ # LED Logic: # - White (Power/Status): # * Blinks before system boot # * Steady ON after boot # - Green (WiFi): # * ON if WiFi connected # * Blinks if not connected # - Blue (Home Assistant/API): # * ON if Home Assistant API connected # * Blinks if not connected # - Red (MMU/Alert): # * Fast blink (placeholder for future MMU/alert logic) # ------------------------------------------------------------------------------ interval : - interval : 500ms then : - lambda : |- // White LED (Power/Status): Blink before boot, steady ON after boot static bool white_blink = false; if (id(system_boot).state) { id(led_power).turn_on(); } else { white_blink = !white_blink; if (white_blink) id(led_power).turn_on(); else id(led_power).turn_off(); } // Green LED (WiFi): ON if connected, blink if not static bool green_blink = false; if (id(wifi_connected).state) { id(led_wifi_status).turn_on(); } else { green_blink = !green_blink; if (green_blink) id(led_wifi_status).turn_on(); else id(led_wifi_status).turn_off(); } // Blue LED (HA/API): ON if connected, blink if not static bool blue_blink = false; if (id(ha_connected)) { id(led_host_status).turn_on(); } else { blue_blink = !blue_blink; if (blue_blink) id(led_host_status).turn_on(); else id(led_host_status).turn_off(); } // Red LED: fast blink (placeholder) static bool red_state = false; red_state = !red_state; if (red_state) id(led_mmu_status).turn_on(); else id(led_mmu_status).turn_off();","title":"Generated: Wed, Jul 30, 2025 1:04:41 AM"},{"location":"logging/","text":"Component: logging \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/logging.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:41 AM \u00b6 # ------------------------------------------------------------------------------ # File: logging.yaml # File Type: ESPHome YAML Include # Purpose: Common ESPHome logging subsystem configuration # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Provides global and module-specific logging configuration for ESPHome nodes. # Enables serial and OTA log output, controls verbosity, and allows # custom actions on log message reception for diagnostics and automation. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # - Ensures that string values do not require unnecessary quotes, improving # readability and maintainability of the YAML configuration. # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # ESPHome logging subsystem configuration # - Enables serial and OTA log output for diagnostics and monitoring. # - Controls global and module-specific verbosity for fine-grained logging. # - Can trigger custom actions on log message reception (e.g., publish firmware version). # - Parameters: # level: Global log level (NONE, ERROR, WARN, INFO, DEBUG, VERBOSE) # logs.main: Module-specific log level for 'main' # on_message: List of actions to perform on log message reception # ------------------------------------------------------------------------------ logger : level : DEBUG # level: Global log level (NONE, ERROR, WARN, INFO, DEBUG, VERBOSE) logs : main : DEBUG # logs.main: Module-specific log level for 'main' # brief Action on log message reception # - Publishes firmware version to log on message on_message : - lambda : |- ESP_LOGI(\"main\", \"Firmware version: ${version}\");","title":"Logging"},{"location":"logging/#component-logging","text":"","title":"Component: logging"},{"location":"logging/#source-homerhendelgitpumphousebosscommonloggingyaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/logging.yaml"},{"location":"logging/#generated-wed-jul-30-2025-10441-am","text":"# ------------------------------------------------------------------------------ # File: logging.yaml # File Type: ESPHome YAML Include # Purpose: Common ESPHome logging subsystem configuration # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Provides global and module-specific logging configuration for ESPHome nodes. # Enables serial and OTA log output, controls verbosity, and allows # custom actions on log message reception for diagnostics and automation. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # - Ensures that string values do not require unnecessary quotes, improving # readability and maintainability of the YAML configuration. # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # ESPHome logging subsystem configuration # - Enables serial and OTA log output for diagnostics and monitoring. # - Controls global and module-specific verbosity for fine-grained logging. # - Can trigger custom actions on log message reception (e.g., publish firmware version). # - Parameters: # level: Global log level (NONE, ERROR, WARN, INFO, DEBUG, VERBOSE) # logs.main: Module-specific log level for 'main' # on_message: List of actions to perform on log message reception # ------------------------------------------------------------------------------ logger : level : DEBUG # level: Global log level (NONE, ERROR, WARN, INFO, DEBUG, VERBOSE) logs : main : DEBUG # logs.main: Module-specific log level for 'main' # brief Action on log message reception # - Publishes firmware version to log on message on_message : - lambda : |- ESP_LOGI(\"main\", \"Firmware version: ${version}\");","title":"Generated: Wed, Jul 30, 2025 1:04:41 AM"},{"location":"mmu/","text":"Component: mmu \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/mmu.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:41 AM \u00b6 # =============================================================================== # File: mmu.yaml # File Type: ESPHome YAML Include # Purpose: MMU PWM Sensor Logic Block (modular include) # Project: PumpHouseBoss # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Measures PWM pulse width on the specified MMU sensor pin (set via substitution). # - Reports pulse width in microseconds (us) using ESPHome's pulse_width sensor. # - Logs the measured value to the ESPHome log every second for diagnostics. # - Designed for modular inclusion in device YAMLs (one block per MMU sensor). # - Set the pin using a substitution (e.g., mmu_sensor_0_pin). # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # =============================================================================== # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # PWM Sensor Block: MMU Sensor 0 # - Measures pulse width on ${mmu_sensor_0_pin} (set via substitution) # - Reports value in microseconds (us) # - Logs value to ESPHome log every second (for debugging/diagnostics) # - Parameters: # pin: GPIO pin (from substitution, e.g., mmu_sensor_0_pin) # name: Sensor name (e.g., \"MMU Sensor 0 PWM\") # id: Sensor ID (e.g., mmu_sensor_0_pwm) # update_interval: How often to sample (1s recommended) # internal: true (not exposed to Home Assistant) # ------------------------------------------------------------------------------ sensor : - platform : pulse_width pin : ${mmu_sensor_0_pin} name : \"MMU Flow Sensor 0\" id : mmu_sensor_0_pwm update_interval : 1s internal : true interval : - interval : 3s then : - lambda : |- ESP_LOGI(\"mmu\", \"MMU Sensor 0 PWM: %f us\", id(mmu_sensor_0_pwm).state);","title":"MMU"},{"location":"mmu/#component-mmu","text":"","title":"Component: mmu"},{"location":"mmu/#source-homerhendelgitpumphousebosscommonmmuyaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/mmu.yaml"},{"location":"mmu/#generated-wed-jul-30-2025-10441-am","text":"# =============================================================================== # File: mmu.yaml # File Type: ESPHome YAML Include # Purpose: MMU PWM Sensor Logic Block (modular include) # Project: PumpHouseBoss # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Measures PWM pulse width on the specified MMU sensor pin (set via substitution). # - Reports pulse width in microseconds (us) using ESPHome's pulse_width sensor. # - Logs the measured value to the ESPHome log every second for diagnostics. # - Designed for modular inclusion in device YAMLs (one block per MMU sensor). # - Set the pin using a substitution (e.g., mmu_sensor_0_pin). # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # =============================================================================== # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # PWM Sensor Block: MMU Sensor 0 # - Measures pulse width on ${mmu_sensor_0_pin} (set via substitution) # - Reports value in microseconds (us) # - Logs value to ESPHome log every second (for debugging/diagnostics) # - Parameters: # pin: GPIO pin (from substitution, e.g., mmu_sensor_0_pin) # name: Sensor name (e.g., \"MMU Sensor 0 PWM\") # id: Sensor ID (e.g., mmu_sensor_0_pwm) # update_interval: How often to sample (1s recommended) # internal: true (not exposed to Home Assistant) # ------------------------------------------------------------------------------ sensor : - platform : pulse_width pin : ${mmu_sensor_0_pin} name : \"MMU Flow Sensor 0\" id : mmu_sensor_0_pwm update_interval : 1s internal : true interval : - interval : 3s then : - lambda : |- ESP_LOGI(\"mmu\", \"MMU Sensor 0 PWM: %f us\", id(mmu_sensor_0_pwm).state);","title":"Generated: Wed, Jul 30, 2025 1:04:41 AM"},{"location":"ota/","text":"Component: ota \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/ota.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:41 AM \u00b6 # ------------------------------------------------------------------------------ # File: ota.yaml # File Type: ESPHome YAML Include # Purpose: Common ESPHome Over-The-Air programming subsystem configuration # Version: 0.7.1 # Date: 2025-07-24 # Author: GitHub Copilot <your-email> # # Description: OTA update configuration for ESPHome nodes. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings ota : # ------------------------------------------------------------------------------ # Enables OTA firmware upload over Wi-Fi # - Password is loaded from the secrets file for security # - Platform can be set (default: esphome) # - Logs a message on OTA completion # - Parameters: # password: OTA password (from secrets file) # platform: OTA platform (default: esphome) # on_end: Actions to perform on OTA completion # ------------------------------------------------------------------------------ password : !secret ota_password # password Load OTA password from secrets file platform : esphome # platform OTA platform (default: esphome) # brief Log message on OTA completion # details Logs a message to indicate OTA update finished on_end : then : - logger.log : OTA update finished # ------------------------------------------------------------------------------ # Safe Mode logging handler # - Triggered when device boots into recovery mode # - Logs a message to indicate safe mode boot # ------------------------------------------------------------------------------ safe_mode : on_safe_mode : then : - logger.log : Booted into safe mode","title":"OTA"},{"location":"ota/#component-ota","text":"","title":"Component: ota"},{"location":"ota/#source-homerhendelgitpumphousebosscommonotayaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/ota.yaml"},{"location":"ota/#generated-wed-jul-30-2025-10441-am","text":"# ------------------------------------------------------------------------------ # File: ota.yaml # File Type: ESPHome YAML Include # Purpose: Common ESPHome Over-The-Air programming subsystem configuration # Version: 0.7.1 # Date: 2025-07-24 # Author: GitHub Copilot <your-email> # # Description: OTA update configuration for ESPHome nodes. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings ota : # ------------------------------------------------------------------------------ # Enables OTA firmware upload over Wi-Fi # - Password is loaded from the secrets file for security # - Platform can be set (default: esphome) # - Logs a message on OTA completion # - Parameters: # password: OTA password (from secrets file) # platform: OTA platform (default: esphome) # on_end: Actions to perform on OTA completion # ------------------------------------------------------------------------------ password : !secret ota_password # password Load OTA password from secrets file platform : esphome # platform OTA platform (default: esphome) # brief Log message on OTA completion # details Logs a message to indicate OTA update finished on_end : then : - logger.log : OTA update finished # ------------------------------------------------------------------------------ # Safe Mode logging handler # - Triggered when device boots into recovery mode # - Logs a message to indicate safe mode boot # ------------------------------------------------------------------------------ safe_mode : on_safe_mode : then : - logger.log : Booted into safe mode","title":"Generated: Wed, Jul 30, 2025 1:04:41 AM"},{"location":"phb-pro-hardware/","text":"PumpHouseBoss Professional - Hardware Guide \u00b6 Pinout Map: ESP32-S3 (44 Pin Package, Top View'') \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 VCC [ NC] \u2500\u2524 01 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 44 \u251c\u2500\u2500 [GND ] GND VCC [ NC] \u2500\u2524 02 \u2502 \u2502 43 \u251c\u2500\u2500 [OUT ] GPIO43 MMU7_CTRL BTN_RESET RST [INLOW] \u2500\u2524 03 \u2502 \u2502 42 \u251c\u2500\u2500 [PWMIN] GPIO44 MMU7_SENS GPIO04 [ NC] \u2500\u2524 04 \u2502 \u2502 41 \u251c\u2500\u2500 [OUT ] GPIO01 MMU6_CTRL BTN_DISP GPIO05 [ IN] \u2500\u2524 05 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 40 \u251c\u2500\u2500 [PWMIN] GPIO02 MMU6_SENS BTN_CTRL GPIO06 [ IN] \u2500\u2524 06 39 \u251c\u2500\u2500 [OUT ] GPIO42 MMU5_CTRL LED_WHITE GPIO07 [ OUT] \u2500\u2524 07 38 \u251c\u2500\u2500 [PWMIN] GPIO41 MMU5_SENS lED_GREEN GPIO15 [ OUT] \u2500\u2524 08 37 \u251c\u2500\u2500 [OUT ] GPIO40 MMU4_CTRL LED_BLUE GPIO16 [ OUT] \u2500\u2524 09 36 \u251c\u2500\u2500 [PWMIN] GPIO39 MMU4_SENS LED_RED GPIO17 [ OUT] \u2500\u2524 10 35 \u251c\u2500\u2500 [OUT ] GPIO38 MMU3_CTRL DISP_SDA GPIO18 [INOUT] \u2500\u2524 11 ESP32-S3 34 \u251c\u2500\u2500 [PWMIN] GPIO37 MMU3_SENS GPIO08 [ NC] \u2500\u2524 12 33 \u251c\u2500\u2500 [OUT ] GPIO36 MMU2_CTRL GPIO03 [-----] \u2500\u2524 13 32 \u251c\u2500\u2500 [PWMIN] GPIO35 MMU2_SENS GPIO46 [-----] \u2500\u2524 14 31 \u251c\u2500\u2500 [-----] GPIO00 DISP_SCL GPIO09 [ OUT] \u2500\u2524 15 30 \u251c\u2500\u2500 [-----] GPIO45 GPIO10 [ NC] \u2500\u2524 16 29 \u251c\u2500\u2500 [NC ] GPIO48 GPIO11 [ NC] \u2500\u2524 17 28 \u251c\u2500\u2500 [OUT ] GPIO47 MMU1_CTRL GPIO12 [ NC] \u2500\u2524 18 27 \u251c\u2500\u2500 [PWMIN] GPIO21 MMU1_SENS GPIO13 [ NC] \u2500\u2524 19 26 \u251c\u2500\u2500 [OUT ] GPIO20 MMU0_CTRL GPIO14 [ NC] \u2500\u2524 20 25 \u251c\u2500\u2500 [PWMIN] GPIO19 MMU0_SENS 5V VIN [5V_IN] \u2500\u2524 21 24 \u251c\u2500\u2500 [GND ] GND GND [ GND] \u2500\u2524 22 23 \u251c\u2500\u2500 [GND ] GND \u2514\u2500\u2500\u2500\u2510USB\u250c\u2500\u2510USB\u250c\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 Notes: \u00b6 Power: supply 5v to VIN (on-board regulator) GND: tie pins 22, 23, 24, and 44 low BTN_RESET: active low; button press pulls to GND for system reset","title":"Hardware"},{"location":"phb-pro-hardware/#pumphouseboss-professional-hardware-guide","text":"","title":"PumpHouseBoss Professional - Hardware Guide"},{"location":"phb-pro-hardware/#pinout-map-esp32-s3-44-pin-package-top-view","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 VCC [ NC] \u2500\u2524 01 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 44 \u251c\u2500\u2500 [GND ] GND VCC [ NC] \u2500\u2524 02 \u2502 \u2502 43 \u251c\u2500\u2500 [OUT ] GPIO43 MMU7_CTRL BTN_RESET RST [INLOW] \u2500\u2524 03 \u2502 \u2502 42 \u251c\u2500\u2500 [PWMIN] GPIO44 MMU7_SENS GPIO04 [ NC] \u2500\u2524 04 \u2502 \u2502 41 \u251c\u2500\u2500 [OUT ] GPIO01 MMU6_CTRL BTN_DISP GPIO05 [ IN] \u2500\u2524 05 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 40 \u251c\u2500\u2500 [PWMIN] GPIO02 MMU6_SENS BTN_CTRL GPIO06 [ IN] \u2500\u2524 06 39 \u251c\u2500\u2500 [OUT ] GPIO42 MMU5_CTRL LED_WHITE GPIO07 [ OUT] \u2500\u2524 07 38 \u251c\u2500\u2500 [PWMIN] GPIO41 MMU5_SENS lED_GREEN GPIO15 [ OUT] \u2500\u2524 08 37 \u251c\u2500\u2500 [OUT ] GPIO40 MMU4_CTRL LED_BLUE GPIO16 [ OUT] \u2500\u2524 09 36 \u251c\u2500\u2500 [PWMIN] GPIO39 MMU4_SENS LED_RED GPIO17 [ OUT] \u2500\u2524 10 35 \u251c\u2500\u2500 [OUT ] GPIO38 MMU3_CTRL DISP_SDA GPIO18 [INOUT] \u2500\u2524 11 ESP32-S3 34 \u251c\u2500\u2500 [PWMIN] GPIO37 MMU3_SENS GPIO08 [ NC] \u2500\u2524 12 33 \u251c\u2500\u2500 [OUT ] GPIO36 MMU2_CTRL GPIO03 [-----] \u2500\u2524 13 32 \u251c\u2500\u2500 [PWMIN] GPIO35 MMU2_SENS GPIO46 [-----] \u2500\u2524 14 31 \u251c\u2500\u2500 [-----] GPIO00 DISP_SCL GPIO09 [ OUT] \u2500\u2524 15 30 \u251c\u2500\u2500 [-----] GPIO45 GPIO10 [ NC] \u2500\u2524 16 29 \u251c\u2500\u2500 [NC ] GPIO48 GPIO11 [ NC] \u2500\u2524 17 28 \u251c\u2500\u2500 [OUT ] GPIO47 MMU1_CTRL GPIO12 [ NC] \u2500\u2524 18 27 \u251c\u2500\u2500 [PWMIN] GPIO21 MMU1_SENS GPIO13 [ NC] \u2500\u2524 19 26 \u251c\u2500\u2500 [OUT ] GPIO20 MMU0_CTRL GPIO14 [ NC] \u2500\u2524 20 25 \u251c\u2500\u2500 [PWMIN] GPIO19 MMU0_SENS 5V VIN [5V_IN] \u2500\u2524 21 24 \u251c\u2500\u2500 [GND ] GND GND [ GND] \u2500\u2524 22 23 \u251c\u2500\u2500 [GND ] GND \u2514\u2500\u2500\u2500\u2510USB\u250c\u2500\u2510USB\u250c\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518","title":"Pinout Map: ESP32-S3 (44 Pin Package, Top View'')"},{"location":"phb-pro-hardware/#notes","text":"Power: supply 5v to VIN (on-board regulator) GND: tie pins 22, 23, 24, and 44 low BTN_RESET: active low; button press pulls to GND for system reset","title":"Notes:"},{"location":"phb-pro-overview/","text":"PumpHouseBoss Professional - Hardware Guide \u00b6 Description \u00b6 PumpHouseBoss Professional is an Advanced Water Distribution System Monitor and Controller. Features \u00b6 Ingress and egress flow monitoring, metering Over/under flow-rate detection, alerts and alarms Automated solenoid control for emergency water-shutoff or water-flow management/control Manual emergency override to shut-off water-flow 4 line LCD (lcd_pcf8574 interface) Historical flow-rate/usage graphing Home Assistant integration via ESPHome Supports up to 8 MMUs (flow-sensor + solenoid) to monitor and control up to 8 water lines Controls \u00b6 CONTROL INPUT FUNCTION BTN_DISP press/releases rotate active MMU in display hold 3s toggle freeze display BTN_CTRL press/release toggle MMU manual override for active MMU hold 3s toggle MMU manual override BTN_RESET press/release system reset Indications \u00b6 LED ACTIVITY INDICATION LED_WHITE solid normal operation slow flash system initialization rapid flash system failure off no power LED_GREEN off WiFi disconnected slow flash WiFi connecting rapid flash WiFi initialization pending solid WiFi connected LED_BLUE off Home Assistant disconnected slow flash Home Assistant connecting rapid flash Home Assistant initialization pending solid Home Assistant connected LED_RED off MMU open (normal operation) slow flash one or more MMUs in manual shut-off state rapid flash on or more MMUs in automatic shut-off state solid all MMUs in shut-off state","title":"Overview"},{"location":"phb-pro-overview/#pumphouseboss-professional-hardware-guide","text":"","title":"PumpHouseBoss Professional - Hardware Guide"},{"location":"phb-pro-overview/#description","text":"PumpHouseBoss Professional is an Advanced Water Distribution System Monitor and Controller.","title":"Description"},{"location":"phb-pro-overview/#features","text":"Ingress and egress flow monitoring, metering Over/under flow-rate detection, alerts and alarms Automated solenoid control for emergency water-shutoff or water-flow management/control Manual emergency override to shut-off water-flow 4 line LCD (lcd_pcf8574 interface) Historical flow-rate/usage graphing Home Assistant integration via ESPHome Supports up to 8 MMUs (flow-sensor + solenoid) to monitor and control up to 8 water lines","title":"Features"},{"location":"phb-pro-overview/#controls","text":"CONTROL INPUT FUNCTION BTN_DISP press/releases rotate active MMU in display hold 3s toggle freeze display BTN_CTRL press/release toggle MMU manual override for active MMU hold 3s toggle MMU manual override BTN_RESET press/release system reset","title":"Controls"},{"location":"phb-pro-overview/#indications","text":"LED ACTIVITY INDICATION LED_WHITE solid normal operation slow flash system initialization rapid flash system failure off no power LED_GREEN off WiFi disconnected slow flash WiFi connecting rapid flash WiFi initialization pending solid WiFi connected LED_BLUE off Home Assistant disconnected slow flash Home Assistant connecting rapid flash Home Assistant initialization pending solid Home Assistant connected LED_RED off MMU open (normal operation) slow flash one or more MMUs in manual shut-off state rapid flash on or more MMUs in automatic shut-off state solid all MMUs in shut-off state","title":"Indications"},{"location":"phb-pro/","text":"Component: phb-pro \u00b6 Source: /home/rhendel/git/PumpHouseBoss/variants/phb-pro/phb-pro.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:41 AM \u00b6 # ------------------------------------------------------------------------------ # File: phb-pro.yaml # File Type: ESPHome YAML Main # Purpose: PumpHouseBoss Pro Variant Main # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: PumpHouseBoss Pro Variant is a Water Distribution System # Monitor and controller built on the ESP32s3 platform. # # Features: - Ingress and egress flow monitoring, metering # - Over/under flow-rate detection, alerts and alarms # - Automated solenoid control for emergency water-shutoff or # water-flow management/control # - Manual emergency override to shut-off water-flow # - 4 line LCD (lcd_pcf8574 interface) # - Historical flow-rate/usage graphing # - Home Assistant integration via ESPHome # - Supports up to 8 MMUs # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # # Note: Build-time Variable Substitution: # - Variables in the form __VAR_NAME__ are automatically replaced # with project-specific values during the build process # (see Makefile and sed logic). # - This enables flexible, reusable configuration for multiple # hardware variants. # - Do not edit these variables directly in the build output. # (Example: __NODE_NAME__, __PLATFORM__, __VERSION__) # # Note: Co-developed with GitHub Copilot by OpenAI. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # Node identity, version, and hardware pin assignments # - Provides substitutions for node name, friendly name, version, and key pins # - Used throughout the configuration for maintainability # - Parameters: # node_name: Node ID used in ESPHome and logs # friendly_name: Human-readable name for dashboards # version: Firmware version tag injected into logs and sensors # flow_sensor_pin: Primary flow sensor pulse counter input # test_output_pin: GPIO test and verification pin # watchdog_timeout: Hardware watchdog timeout period # watchdog_trigger_pin: External watchdog trigger output # watchdog_early_trigger: Early trigger before timeout # ------------------------------------------------------------------------------ substitutions : chip_set : __PLATFORM__ node_name : __NODE_NAME__ friendly_name : __FRIENDLY_NAME__ version : __VERSION__ watchdog_timeout : \"30s\" watchdog_trigger_pin : \"GPIO07\" watchdog_early_trigger : \"25s\" led_power_pin : GPIO7 led_wifi_status_pin : GPIO15 led_host_status_pin : GPIO16 led_mmu_status_pin : GPIO17 mmu_sensor_0_pin : GPIO19 # ------------------------------------------------------------------------------ # Common package includes for modular configuration # - Modularizes board, display, network, OTA, logging, and watchdog config # display: Display configuration (e.g., ST7789V panel) # wifi: Wi-Fi credentials, static IP, and fallback # ota: OTA settings (port, auth) # web: Web interface (http://<device>.local) # logging: USB/UART logging config (level, baud) # watchdog: System reliability watchdog component # ------------------------------------------------------------------------------ packages : esp32s3 : !include common/__PLATFORM__.yaml wifi : !include common/wifi.yaml ota : !include common/ota.yaml api : !include common/api.yaml web : !include common/web_server.yaml logging : !include common/logging.yaml watchdog : !include common/watchdog.yaml indications : !include common/indications.yaml display : !include common/display_pcf8574.yaml mmu : !include common/mmu.yaml # ------------------------------------------------------------------------------ # Global Variables # - Defines internal variables for use in automations and logic blocks # - Example: ha_connected tracks Home Assistant API connection status # - Parameters: # id: Variable name (referenced in lambdas) # type: Data type (e.g., bool, int, float) # restore_value: Whether to restore value after reboot (no for runtime state) # initial_value: Value at boot # ------------------------------------------------------------------------------ globals : - id : ha_connected type : bool restore_value : no initial_value : 'false' # ------------------------------------------------------------------------------ # ESPHome-specific metadata and on_boot logic # - Sets node name and friendly name # - Publishes firmware version to Home Assistant on boot # - Parameters: # name: Node name # friendly_name: Human-readable name # on_boot: Actions to perform on boot # - NOTE: ESPHome does not currently support reset diagnostics on ESP32-S3. # These are placeholders until native support is available. # ------------------------------------------------------------------------------ esphome : name : __NODE_NAME__ friendly_name : __FRIENDLY_NAME__ on_boot : priority : -100 then : - text_sensor.template.publish : id : firmware_version state : \"__VERSION__\" - text_sensor.template.publish : id : reset_reason state : \"Power On Reset\" - sensor.template.publish : id : last_reset_code state : 1 # ------------------------------------------------------------------------------ # I2C Bus Configuration # - Configures the I2C bus for peripherals (e.g., LCD, sensors) # - sda: GPIO pin used for I2C data (SDA) # - scl: GPIO pin used for I2C clock (SCL) # - scan: true enables automatic device address scanning (shows in logs) # ------------------------------------------------------------------------------ i2c : sda : 18 scl : 9 scan : true # ------------------------------------------------------------------------------ # ESP32 Reset Diagnostics (Fallback for ESP32-S3) # - ESPHome does not yet support esp32_reset_reason/last_reset on ESP32-S3. # - These template sensors default to 'Power On Reset' (string) and 1 (numeric). # - Update to native sensors when ESPHome adds support for ESP32-S3. # - Parameters: # platform: template # name: Sensor name (shown in Home Assistant) # id: Sensor ID for internal reference # - NOTE: ESPHome does not currently support reset diagnostics on ESP32-S3. # These are placeholders until native support is available. # ------------------------------------------------------------------------------ sensor : - platform : template name : \"Last Reset Code\" # Fallback: always 1 (Power On Reset code) id : last_reset_code lambda : |- return 1; update_interval : never - platform : uptime name : \"Uptime\" # Uptime in seconds since boot id : uptime_sensor # ------------------------------------------------------------------------------ # Uptime and flow rate sensors (hall-effect pulse counter) # - Uptime sensor: seconds since boot # - Flow rate sensor: hall-effect pulse counter, configurable input pin # - Calibration factor converts pulses to L/min # - Parameters: # platform: Sensor platform (uptime, pulse_counter) # pin: Input pin for pulse counter # name: Sensor name # id: Sensor ID # update_interval: Update frequency # count_mode: Pulse counting mode # internal_filter: Filter for pulse input # unit_of_measurement: Measurement units # accuracy_decimals: Number of decimals # filters: Calibration factor # ------------------------------------------------------------------------------ binary_sensor : - platform : status id : wifi_connected - platform : template id : system_boot name : \"System Boot\" lambda : |- // Always true after boot return true; # ------------------------------------------------------------------------------ # Template text sensors # - Firmware Version: Publishes the firmware version string to Home Assistant # - Reset Reason: Fallback for ESP32-S3, always 'Power On Reset' # - Parameters: # platform: template # name: Sensor name # id: Sensor ID # icon: Home Assistant icon (optional) # update_interval: Update frequency # lambda: Lambda function for value # # NOTE: ESPHome does not currently support reset diagnostics on ESP32-S3. # This is a placeholder until native support is available. # ------------------------------------------------------------------------------ text_sensor : - platform : template name : \"Firmware Version\" # User-visible sensor name in HA id : firmware_version icon : \"mdi:tag\" update_interval : never # Static value set only on boot lambda : |- return {\"__VERSION__\"}; - platform : template name : \"Reset Reason\" # Fallback: always 'Power On Reset' on ESP32-S3 id : reset_reason update_interval : never lambda : |- return {\"Power On Reset\"};","title":"PHB Pro"},{"location":"phb-pro/#component-phb-pro","text":"","title":"Component: phb-pro"},{"location":"phb-pro/#source-homerhendelgitpumphousebossvariantsphb-prophb-proyaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/variants/phb-pro/phb-pro.yaml"},{"location":"phb-pro/#generated-wed-jul-30-2025-10441-am","text":"# ------------------------------------------------------------------------------ # File: phb-pro.yaml # File Type: ESPHome YAML Main # Purpose: PumpHouseBoss Pro Variant Main # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: PumpHouseBoss Pro Variant is a Water Distribution System # Monitor and controller built on the ESP32s3 platform. # # Features: - Ingress and egress flow monitoring, metering # - Over/under flow-rate detection, alerts and alarms # - Automated solenoid control for emergency water-shutoff or # water-flow management/control # - Manual emergency override to shut-off water-flow # - 4 line LCD (lcd_pcf8574 interface) # - Historical flow-rate/usage graphing # - Home Assistant integration via ESPHome # - Supports up to 8 MMUs # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # # Note: Build-time Variable Substitution: # - Variables in the form __VAR_NAME__ are automatically replaced # with project-specific values during the build process # (see Makefile and sed logic). # - This enables flexible, reusable configuration for multiple # hardware variants. # - Do not edit these variables directly in the build output. # (Example: __NODE_NAME__, __PLATFORM__, __VERSION__) # # Note: Co-developed with GitHub Copilot by OpenAI. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # Node identity, version, and hardware pin assignments # - Provides substitutions for node name, friendly name, version, and key pins # - Used throughout the configuration for maintainability # - Parameters: # node_name: Node ID used in ESPHome and logs # friendly_name: Human-readable name for dashboards # version: Firmware version tag injected into logs and sensors # flow_sensor_pin: Primary flow sensor pulse counter input # test_output_pin: GPIO test and verification pin # watchdog_timeout: Hardware watchdog timeout period # watchdog_trigger_pin: External watchdog trigger output # watchdog_early_trigger: Early trigger before timeout # ------------------------------------------------------------------------------ substitutions : chip_set : __PLATFORM__ node_name : __NODE_NAME__ friendly_name : __FRIENDLY_NAME__ version : __VERSION__ watchdog_timeout : \"30s\" watchdog_trigger_pin : \"GPIO07\" watchdog_early_trigger : \"25s\" led_power_pin : GPIO7 led_wifi_status_pin : GPIO15 led_host_status_pin : GPIO16 led_mmu_status_pin : GPIO17 mmu_sensor_0_pin : GPIO19 # ------------------------------------------------------------------------------ # Common package includes for modular configuration # - Modularizes board, display, network, OTA, logging, and watchdog config # display: Display configuration (e.g., ST7789V panel) # wifi: Wi-Fi credentials, static IP, and fallback # ota: OTA settings (port, auth) # web: Web interface (http://<device>.local) # logging: USB/UART logging config (level, baud) # watchdog: System reliability watchdog component # ------------------------------------------------------------------------------ packages : esp32s3 : !include common/__PLATFORM__.yaml wifi : !include common/wifi.yaml ota : !include common/ota.yaml api : !include common/api.yaml web : !include common/web_server.yaml logging : !include common/logging.yaml watchdog : !include common/watchdog.yaml indications : !include common/indications.yaml display : !include common/display_pcf8574.yaml mmu : !include common/mmu.yaml # ------------------------------------------------------------------------------ # Global Variables # - Defines internal variables for use in automations and logic blocks # - Example: ha_connected tracks Home Assistant API connection status # - Parameters: # id: Variable name (referenced in lambdas) # type: Data type (e.g., bool, int, float) # restore_value: Whether to restore value after reboot (no for runtime state) # initial_value: Value at boot # ------------------------------------------------------------------------------ globals : - id : ha_connected type : bool restore_value : no initial_value : 'false' # ------------------------------------------------------------------------------ # ESPHome-specific metadata and on_boot logic # - Sets node name and friendly name # - Publishes firmware version to Home Assistant on boot # - Parameters: # name: Node name # friendly_name: Human-readable name # on_boot: Actions to perform on boot # - NOTE: ESPHome does not currently support reset diagnostics on ESP32-S3. # These are placeholders until native support is available. # ------------------------------------------------------------------------------ esphome : name : __NODE_NAME__ friendly_name : __FRIENDLY_NAME__ on_boot : priority : -100 then : - text_sensor.template.publish : id : firmware_version state : \"__VERSION__\" - text_sensor.template.publish : id : reset_reason state : \"Power On Reset\" - sensor.template.publish : id : last_reset_code state : 1 # ------------------------------------------------------------------------------ # I2C Bus Configuration # - Configures the I2C bus for peripherals (e.g., LCD, sensors) # - sda: GPIO pin used for I2C data (SDA) # - scl: GPIO pin used for I2C clock (SCL) # - scan: true enables automatic device address scanning (shows in logs) # ------------------------------------------------------------------------------ i2c : sda : 18 scl : 9 scan : true # ------------------------------------------------------------------------------ # ESP32 Reset Diagnostics (Fallback for ESP32-S3) # - ESPHome does not yet support esp32_reset_reason/last_reset on ESP32-S3. # - These template sensors default to 'Power On Reset' (string) and 1 (numeric). # - Update to native sensors when ESPHome adds support for ESP32-S3. # - Parameters: # platform: template # name: Sensor name (shown in Home Assistant) # id: Sensor ID for internal reference # - NOTE: ESPHome does not currently support reset diagnostics on ESP32-S3. # These are placeholders until native support is available. # ------------------------------------------------------------------------------ sensor : - platform : template name : \"Last Reset Code\" # Fallback: always 1 (Power On Reset code) id : last_reset_code lambda : |- return 1; update_interval : never - platform : uptime name : \"Uptime\" # Uptime in seconds since boot id : uptime_sensor # ------------------------------------------------------------------------------ # Uptime and flow rate sensors (hall-effect pulse counter) # - Uptime sensor: seconds since boot # - Flow rate sensor: hall-effect pulse counter, configurable input pin # - Calibration factor converts pulses to L/min # - Parameters: # platform: Sensor platform (uptime, pulse_counter) # pin: Input pin for pulse counter # name: Sensor name # id: Sensor ID # update_interval: Update frequency # count_mode: Pulse counting mode # internal_filter: Filter for pulse input # unit_of_measurement: Measurement units # accuracy_decimals: Number of decimals # filters: Calibration factor # ------------------------------------------------------------------------------ binary_sensor : - platform : status id : wifi_connected - platform : template id : system_boot name : \"System Boot\" lambda : |- // Always true after boot return true; # ------------------------------------------------------------------------------ # Template text sensors # - Firmware Version: Publishes the firmware version string to Home Assistant # - Reset Reason: Fallback for ESP32-S3, always 'Power On Reset' # - Parameters: # platform: template # name: Sensor name # id: Sensor ID # icon: Home Assistant icon (optional) # update_interval: Update frequency # lambda: Lambda function for value # # NOTE: ESPHome does not currently support reset diagnostics on ESP32-S3. # This is a placeholder until native support is available. # ------------------------------------------------------------------------------ text_sensor : - platform : template name : \"Firmware Version\" # User-visible sensor name in HA id : firmware_version icon : \"mdi:tag\" update_interval : never # Static value set only on boot lambda : |- return {\"__VERSION__\"}; - platform : template name : \"Reset Reason\" # Fallback: always 'Power On Reset' on ESP32-S3 id : reset_reason update_interval : never lambda : |- return {\"Power On Reset\"};","title":"Generated: Wed, Jul 30, 2025 1:04:41 AM"},{"location":"phb-std-hardware/","text":"PumpHouseBoss Pro - Hardware Guide \u00b6 Pinout Map: ESP32 (30 Pin Package, Top View'') \u00b6 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 BTN_RESET [ EN] \u2500\u2524 01 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 30 \u251c\u2500 [NC ] GPIO23 NC GPIO36 [ NC] \u2500\u2524 02 \u2502 \u2502 29 \u251c\u2500 [OUT ] GPIO22 DISP_SCL BTN_CTRL GPIO39 [ IN] \u2500\u2524 03 \u2502 \u2502 28 \u251c\u2500 [-----] GPIO01 NC LED_WHITE GPIO34 [ IN] \u2500\u2524 04 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 27 \u251c\u2500 [-----] GPIO03 NC LED_GREEN GPIO35 [ IN] \u2500\u2524 05 26 \u251c\u2500 [INOUT] GPIO21 DISP_SDA LED_BLUE GPIO32 [ OUT] \u2500\u2524 06 25 \u251c\u2500 [NC ] GPIO19 NC LED_RED GPIO33 [ OUT] \u2500\u2524 07 24 \u251c\u2500 [NC ] GPIO18 NC NC GPIO25 [ OUT] \u2500\u2524 08 ESP-32 23 \u251c\u2500 [XXX ] GPIO05 NC NC GPIO26 [ NC] \u2500\u2524 09 22 \u251c\u2500 [NC ] GPIO17 NC NC GPIO27 [ NC] \u2500\u2524 10 21 \u251c\u2500 [OUT ] GPIO16 MMU0_CTRL NC GPIO14 [ NC] \u2500\u2524 11 20 \u251c\u2500 [PWMIN] GPIO04 MMU0_SENS NC GPIO12 [-----] \u2500\u2524 12 19 \u251c\u2500 [-----] GPIO02 NC NC GPIO13 [ NC] \u2500\u2524 13 18 \u251c\u2500 [-----] GPIO15 NC GND [ GND] \u2500\u2524 14 17 \u251c\u2500 [GND ] GND VIN [5V_IN] \u2500\u2524 15 16 \u251c\u2500 [NC ] NC \u2514\u2500\u2500\u2500\u2500\u2500\u2510USB\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518 Notes: \u00b6 Power: supply 5v to VIN (on-board regulator) GND: tie pins 14 and 17 low BTN_RESET: active low; button press pulls to GND for system reset","title":"Hardware"},{"location":"phb-std-hardware/#pumphouseboss-pro-hardware-guide","text":"","title":"PumpHouseBoss Pro - Hardware Guide"},{"location":"phb-std-hardware/#pinout-map-esp32-30-pin-package-top-view","text":"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 BTN_RESET [ EN] \u2500\u2524 01 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 30 \u251c\u2500 [NC ] GPIO23 NC GPIO36 [ NC] \u2500\u2524 02 \u2502 \u2502 29 \u251c\u2500 [OUT ] GPIO22 DISP_SCL BTN_CTRL GPIO39 [ IN] \u2500\u2524 03 \u2502 \u2502 28 \u251c\u2500 [-----] GPIO01 NC LED_WHITE GPIO34 [ IN] \u2500\u2524 04 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 27 \u251c\u2500 [-----] GPIO03 NC LED_GREEN GPIO35 [ IN] \u2500\u2524 05 26 \u251c\u2500 [INOUT] GPIO21 DISP_SDA LED_BLUE GPIO32 [ OUT] \u2500\u2524 06 25 \u251c\u2500 [NC ] GPIO19 NC LED_RED GPIO33 [ OUT] \u2500\u2524 07 24 \u251c\u2500 [NC ] GPIO18 NC NC GPIO25 [ OUT] \u2500\u2524 08 ESP-32 23 \u251c\u2500 [XXX ] GPIO05 NC NC GPIO26 [ NC] \u2500\u2524 09 22 \u251c\u2500 [NC ] GPIO17 NC NC GPIO27 [ NC] \u2500\u2524 10 21 \u251c\u2500 [OUT ] GPIO16 MMU0_CTRL NC GPIO14 [ NC] \u2500\u2524 11 20 \u251c\u2500 [PWMIN] GPIO04 MMU0_SENS NC GPIO12 [-----] \u2500\u2524 12 19 \u251c\u2500 [-----] GPIO02 NC NC GPIO13 [ NC] \u2500\u2524 13 18 \u251c\u2500 [-----] GPIO15 NC GND [ GND] \u2500\u2524 14 17 \u251c\u2500 [GND ] GND VIN [5V_IN] \u2500\u2524 15 16 \u251c\u2500 [NC ] NC \u2514\u2500\u2500\u2500\u2500\u2500\u2510USB\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2518","title":"Pinout Map: ESP32 (30 Pin Package, Top View'')"},{"location":"phb-std-hardware/#notes","text":"Power: supply 5v to VIN (on-board regulator) GND: tie pins 14 and 17 low BTN_RESET: active low; button press pulls to GND for system reset","title":"Notes:"},{"location":"phb-std-overview/","text":"PumpHouseBoss Standard - Hardware Guide \u00b6 Description \u00b6 PumpHouseBoss Standard is a Water Distribution System Monitor and Controller. Features \u00b6 Ingress and egress flow monitoring, metering Over/under flow-rate detection, alerts and alarms Automated solenoid control for emergency water-shutoff or water-flow management/control Manual emergency override to shut-off water-flow 4 line LCD (lcd_pcf8574 interface) Historical flow-rate/usage graphing Home Assistant integration via ESPHome Supports 1 MMU (flow-sensor + solenoid) to monitor and control a single water line Controls \u00b6 CONTROL INPUT FUNCTION BTN_CTRL hold 3s toggle MMU manual override BTN_RESET press/release system reset Indications \u00b6 LED ACTIVITY INDICATION LED_WHITE solid normal operation slow flash system initialization rapid flash system failure off no power LED_GREEN off WiFi disconnected slow flash WiFi connecting rapid flash WiFi initialization pending solid WiFi connected LED_BLUE off Home Assistant disconnected slow flash Home Assistant connecting rapid flash Home Assistant initialization pending solid Home Assistant connected LED_RED off MMU open (normal operation) slow flash MMU in manual shut-off state rapid flash MMU in automatic shut-off state","title":"Overview"},{"location":"phb-std-overview/#pumphouseboss-standard-hardware-guide","text":"","title":"PumpHouseBoss Standard - Hardware Guide"},{"location":"phb-std-overview/#description","text":"PumpHouseBoss Standard is a Water Distribution System Monitor and Controller.","title":"Description"},{"location":"phb-std-overview/#features","text":"Ingress and egress flow monitoring, metering Over/under flow-rate detection, alerts and alarms Automated solenoid control for emergency water-shutoff or water-flow management/control Manual emergency override to shut-off water-flow 4 line LCD (lcd_pcf8574 interface) Historical flow-rate/usage graphing Home Assistant integration via ESPHome Supports 1 MMU (flow-sensor + solenoid) to monitor and control a single water line","title":"Features"},{"location":"phb-std-overview/#controls","text":"CONTROL INPUT FUNCTION BTN_CTRL hold 3s toggle MMU manual override BTN_RESET press/release system reset","title":"Controls"},{"location":"phb-std-overview/#indications","text":"LED ACTIVITY INDICATION LED_WHITE solid normal operation slow flash system initialization rapid flash system failure off no power LED_GREEN off WiFi disconnected slow flash WiFi connecting rapid flash WiFi initialization pending solid WiFi connected LED_BLUE off Home Assistant disconnected slow flash Home Assistant connecting rapid flash Home Assistant initialization pending solid Home Assistant connected LED_RED off MMU open (normal operation) slow flash MMU in manual shut-off state rapid flash MMU in automatic shut-off state","title":"Indications"},{"location":"phb-std/","text":"Component: phb-std \u00b6 Source: /home/rhendel/git/PumpHouseBoss/variants/phb-std/phb-std.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:41 AM \u00b6 # ------------------------------------------------------------------------------ # File: phb-std.yaml # File Type: ESPHome YAML Main # Purpose: PumpHouseBoss Standard Variant Main # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: PumpHouseBoss Standard Variant is a Water Distribution System # Monitor and controller built on the ESP32 platform. # # Features: - Ingress and egress flow monitoring, metering # - Over/under flow-rate detection, alerts and alarms # - Automated solenoid control for emergency water-shutoff or # water-flow management/control # - Manual emergency override to shut-off water-flow # - 4 line LCD (lcd_pcf8574 interface) # - Historical flow-rate/usage graphing # - Home Assistant integration via ESPHome # - Supports up to 5 MMUs # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # # Note: Co-developed with GitHub Copilot by OpenAI. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # Node identity, version, and hardware pin assignments # - Provides substitutions for node name, friendly name, version, and key pins # - Used throughout the configuration for maintainability # - Parameters: # node_name: Node ID used in ESPHome and logs # friendly_name: Human-readable name for dashboards # version: Firmware version tag injected into logs and sensors # flow_sensor_pin: Primary flow sensor pulse counter input # test_output_pin: GPIO test and verification pin # watchdog_timeout: Hardware watchdog timeout period # watchdog_trigger_pin: External watchdog trigger output # watchdog_early_trigger: Early trigger before timeout # ------------------------------------------------------------------------------ substitutions : chip_set : __PLATFORM__ node_name : __NODE_NAME__ friendly_name : __FRIENDLY_NAME__ version : __VERSION__ watchdog_timeout : \"30s\" watchdog_trigger_pin : \"GPIO07\" watchdog_early_trigger : \"25s\" # ------------------------------------------------------------------------------ # Common package includes for modular configuration # - Modularizes board, display, network, OTA, logging, and watchdog config # - Parameters: # esp32: ESP32 board and framework config # display: Display configuration (e.g., ST7789V panel) # wifi: Wi-Fi credentials, static IP, and fallback # ota: OTA settings (port, auth) # web: Web interface (http://<device>.local) # logging: USB/UART logging config (level, baud) # watchdog: System reliability watchdog component # ------------------------------------------------------------------------------ packages : esp32 : !include __PROJECT_ROOT__/common/__PLATFORM__.yaml wifi : !include __PROJECT_ROOT__/common/wifi.yaml ota : !include __PROJECT_ROOT__/common/ota.yaml web : !include __PROJECT_ROOT__/common/web_server.yaml logging : !include __PROJECT_ROOT__/common/logging.yaml watchdog : !include __PROJECT_ROOT__/common/watchdog.yaml # ------------------------------------------------------------------------------ # ESPHome-specific metadata and on_boot logic # - Sets node name and friendly name # - Publishes firmware version to Home Assistant on boot # - Parameters: # name: Node name # friendly_name: Human-readable name # on_boot: Actions to perform on boot # ------------------------------------------------------------------------------ esphome : name : __NODE_NAME__ friendly_name : __FRIENDLY_NAME__ on_boot : priority : -100 then : - text_sensor.template.publish : id : firmware_version state : version # Publishes version string to Home Assistant on boot # ------------------------------------------------------------------------------ # Template sensor exposing firmware version as Home Assistant text_sensor # - Publishes the firmware version string to Home Assistant # - Parameters: # name: Sensor name # id: Sensor ID # icon: Home Assistant icon # update_interval: Update frequency # lambda: Lambda function for value # ------------------------------------------------------------------------------ text_sensor : - platform : template name : \"Firmware Version\" # User-visible sensor name in HA id : firmware_version icon : \"mdi:tag\" update_interval : never # Static value set only on boot lambda : |- return {\"__VERSION__\"}; # ------------------------------------------------------------------------------ # Uptime and flow rate sensors (hall-effect pulse counter) # - Uptime sensor: seconds since boot # - Flow rate sensor: hall-effect pulse counter, configurable input pin # - Calibration factor converts pulses to L/min # - Parameters: # platform: Sensor platform (uptime, pulse_counter) # pin: Input pin for pulse counter # name: Sensor name # id: Sensor ID # update_interval: Update frequency # count_mode: Pulse counting mode # internal_filter: Filter for pulse input # unit_of_measurement: Measurement units # accuracy_decimals: Number of decimals # filters: Calibration factor # ------------------------------------------------------------------------------ sensor : - platform : uptime name : \"Uptime\" # Uptime in seconds since boot id : uptime_sensor","title":"PHB Std"},{"location":"phb-std/#component-phb-std","text":"","title":"Component: phb-std"},{"location":"phb-std/#source-homerhendelgitpumphousebossvariantsphb-stdphb-stdyaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/variants/phb-std/phb-std.yaml"},{"location":"phb-std/#generated-wed-jul-30-2025-10441-am","text":"# ------------------------------------------------------------------------------ # File: phb-std.yaml # File Type: ESPHome YAML Main # Purpose: PumpHouseBoss Standard Variant Main # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: PumpHouseBoss Standard Variant is a Water Distribution System # Monitor and controller built on the ESP32 platform. # # Features: - Ingress and egress flow monitoring, metering # - Over/under flow-rate detection, alerts and alarms # - Automated solenoid control for emergency water-shutoff or # water-flow management/control # - Manual emergency override to shut-off water-flow # - 4 line LCD (lcd_pcf8574 interface) # - Historical flow-rate/usage graphing # - Home Assistant integration via ESPHome # - Supports up to 5 MMUs # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # # Note: Co-developed with GitHub Copilot by OpenAI. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # Node identity, version, and hardware pin assignments # - Provides substitutions for node name, friendly name, version, and key pins # - Used throughout the configuration for maintainability # - Parameters: # node_name: Node ID used in ESPHome and logs # friendly_name: Human-readable name for dashboards # version: Firmware version tag injected into logs and sensors # flow_sensor_pin: Primary flow sensor pulse counter input # test_output_pin: GPIO test and verification pin # watchdog_timeout: Hardware watchdog timeout period # watchdog_trigger_pin: External watchdog trigger output # watchdog_early_trigger: Early trigger before timeout # ------------------------------------------------------------------------------ substitutions : chip_set : __PLATFORM__ node_name : __NODE_NAME__ friendly_name : __FRIENDLY_NAME__ version : __VERSION__ watchdog_timeout : \"30s\" watchdog_trigger_pin : \"GPIO07\" watchdog_early_trigger : \"25s\" # ------------------------------------------------------------------------------ # Common package includes for modular configuration # - Modularizes board, display, network, OTA, logging, and watchdog config # - Parameters: # esp32: ESP32 board and framework config # display: Display configuration (e.g., ST7789V panel) # wifi: Wi-Fi credentials, static IP, and fallback # ota: OTA settings (port, auth) # web: Web interface (http://<device>.local) # logging: USB/UART logging config (level, baud) # watchdog: System reliability watchdog component # ------------------------------------------------------------------------------ packages : esp32 : !include __PROJECT_ROOT__/common/__PLATFORM__.yaml wifi : !include __PROJECT_ROOT__/common/wifi.yaml ota : !include __PROJECT_ROOT__/common/ota.yaml web : !include __PROJECT_ROOT__/common/web_server.yaml logging : !include __PROJECT_ROOT__/common/logging.yaml watchdog : !include __PROJECT_ROOT__/common/watchdog.yaml # ------------------------------------------------------------------------------ # ESPHome-specific metadata and on_boot logic # - Sets node name and friendly name # - Publishes firmware version to Home Assistant on boot # - Parameters: # name: Node name # friendly_name: Human-readable name # on_boot: Actions to perform on boot # ------------------------------------------------------------------------------ esphome : name : __NODE_NAME__ friendly_name : __FRIENDLY_NAME__ on_boot : priority : -100 then : - text_sensor.template.publish : id : firmware_version state : version # Publishes version string to Home Assistant on boot # ------------------------------------------------------------------------------ # Template sensor exposing firmware version as Home Assistant text_sensor # - Publishes the firmware version string to Home Assistant # - Parameters: # name: Sensor name # id: Sensor ID # icon: Home Assistant icon # update_interval: Update frequency # lambda: Lambda function for value # ------------------------------------------------------------------------------ text_sensor : - platform : template name : \"Firmware Version\" # User-visible sensor name in HA id : firmware_version icon : \"mdi:tag\" update_interval : never # Static value set only on boot lambda : |- return {\"__VERSION__\"}; # ------------------------------------------------------------------------------ # Uptime and flow rate sensors (hall-effect pulse counter) # - Uptime sensor: seconds since boot # - Flow rate sensor: hall-effect pulse counter, configurable input pin # - Calibration factor converts pulses to L/min # - Parameters: # platform: Sensor platform (uptime, pulse_counter) # pin: Input pin for pulse counter # name: Sensor name # id: Sensor ID # update_interval: Update frequency # count_mode: Pulse counting mode # internal_filter: Filter for pulse input # unit_of_measurement: Measurement units # accuracy_decimals: Number of decimals # filters: Calibration factor # ------------------------------------------------------------------------------ sensor : - platform : uptime name : \"Uptime\" # Uptime in seconds since boot id : uptime_sensor","title":"Generated: Wed, Jul 30, 2025 1:04:41 AM"},{"location":"secrets.template/","text":"Component: secrets.template \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/secrets.template.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:41 AM \u00b6 # ------------------------------------------------------------------------------ # File: secrets.template.yaml # File Type: ESPHome YAML Include # Purpose: Template for ESPHome secrets file (credentials, passwords) # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Copy this file to `secrets.yaml` and fill in your actual values. # This template is safe to check into version control. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ---------------------------------------------------------------------------- # YAML linter configuration # - Disables quoted-strings rule for improved readability # ---------------------------------------------------------------------------- # yamllint disable rule:quoted-strings # ---------------------------------------------------------------------------- # Wi-Fi and service credentials # - Template values for secrets.yaml (do not use real credentials here) # - Parameters: # wifi_ssid: Wi-Fi network name # wifi_password: Wi-Fi network password # fallback_password: Fallback AP password # ota_password: OTA update password # web_user: Web Server username # web_password: Web Server password # ---------------------------------------------------------------------------- wifi_ssid : \"YOUR_WIFI_SSID\" # Wi-Fi network name wifi_password : \"YOUR_WIFI_PASSWORD\" # Wi-Fi network password fallback_password : \"YOUR_FALLBACK_PASSWORD\" # Fallback AP password ota_password : \"YOUR_OTA_PASSWORD\" # OTA update password web_user : \"YOUR_WEB_USER\" # Web Server username web_password : \"YOUR_WEB_PASSWORD\" # Web Server password","title":"Secrets Template"},{"location":"secrets.template/#component-secretstemplate","text":"","title":"Component: secrets.template"},{"location":"secrets.template/#source-homerhendelgitpumphousebosscommonsecretstemplateyaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/secrets.template.yaml"},{"location":"secrets.template/#generated-wed-jul-30-2025-10441-am","text":"# ------------------------------------------------------------------------------ # File: secrets.template.yaml # File Type: ESPHome YAML Include # Purpose: Template for ESPHome secrets file (credentials, passwords) # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Copy this file to `secrets.yaml` and fill in your actual values. # This template is safe to check into version control. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ---------------------------------------------------------------------------- # YAML linter configuration # - Disables quoted-strings rule for improved readability # ---------------------------------------------------------------------------- # yamllint disable rule:quoted-strings # ---------------------------------------------------------------------------- # Wi-Fi and service credentials # - Template values for secrets.yaml (do not use real credentials here) # - Parameters: # wifi_ssid: Wi-Fi network name # wifi_password: Wi-Fi network password # fallback_password: Fallback AP password # ota_password: OTA update password # web_user: Web Server username # web_password: Web Server password # ---------------------------------------------------------------------------- wifi_ssid : \"YOUR_WIFI_SSID\" # Wi-Fi network name wifi_password : \"YOUR_WIFI_PASSWORD\" # Wi-Fi network password fallback_password : \"YOUR_FALLBACK_PASSWORD\" # Fallback AP password ota_password : \"YOUR_OTA_PASSWORD\" # OTA update password web_user : \"YOUR_WEB_USER\" # Web Server username web_password : \"YOUR_WEB_PASSWORD\" # Web Server password","title":"Generated: Wed, Jul 30, 2025 1:04:41 AM"},{"location":"watchdog/","text":"Component: watchdog \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/watchdog.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:41 AM \u00b6 ```yaml ------------------------------------------------------------------------------ \u00b6 File: watchdog.yaml \u00b6 File Type: ESPHome YAML Include \u00b6 Purpose: System reliability watchdog component for ESP32 platforms \u00b6 Version: 0.7.1 \u00b6 Date: 2025-07-24 \u00b6 Author: Roland Tembo Hendel rhendel@nexuslogic.com \u00b6 \u00b6 Description: Provides hardware watchdog timer, external watchdog trigger, \u00b6 reset reason monitoring, and system health diagnostics for \u00b6 mission-critical pump house monitoring applications. \u00b6 \u00b6 License: GNU General Public License v3.0 \u00b6 SPDX-License-Identifier: GPL-3.0-or-later \u00b6 Copyright: (c) 2025 Roland Tembo Hendel \u00b6 This program is free software: you can redistribute it and/or \u00b6 modify it under the terms of the GNU General Public License. \u00b6 ------------------------------------------------------------------------------ \u00b6 ------------------------------------------------------------------------------ \u00b6 YAML linter configuration \u00b6 - Disables quoted-strings rule for improved readability \u00b6 - Ensures that string values do not require unnecessary quotes, improving \u00b6 readability and maintainability of the YAML configuration. \u00b6 ------------------------------------------------------------------------------ \u00b6 yamllint disable rule:quoted-strings \u00b6 ------------------------------------------------------------------------------ \u00b6 Boot-time system monitoring initialization \u00b6 - Sets up system monitoring and software watchdog actions to run on boot. \u00b6 - Logs system and reset monitoring status for diagnostics and reliability tracking. \u00b6 - Ensures that monitoring is active as soon as the device starts. \u00b6 ------------------------------------------------------------------------------ \u00b6 esphome: on_boot: priority: 200 # High priority - run early in boot sequence then: - logger.log: level: INFO tag: \"SYSTEM\" format: \"System monitoring initialized - software watchdog active\" - logger.log: level: INFO tag: \"SYSTEM\" format: \"Reset monitoring active - tracking system stability\" ------------------------------------------------------------------------------ \u00b6 Watchdog status and reset reason monitoring \u00b6 - Defines a text sensor for human-readable reset reason tracking. \u00b6 - Uses esp_reset_reason() to determine and expose the last reset cause as a string. \u00b6 - Aids in diagnostics and troubleshooting by making reset causes visible in Home Assistant. \u00b6 - Parameters: \u00b6 name: Sensor name for reset reason \u00b6 id: Sensor ID \u00b6 icon: Icon for Home Assistant \u00b6 update_interval: How often to update the sensor \u00b6 lambda: C++ code to determine the reset reason \u00b6 ------------------------------------------------------------------------------ \u00b6 text_sensor: # brief Human-readable reset reason tracking # details # - Exposes the last reset reason as a readable string # - Uses esp_reset_reason() to determine cause - platform: template name: \"Reset Reason\" # name Sensor name for reset reason id: reset_reason_text # id Sensor ID icon: \"mdi:restart\" update_interval: never # Set once on boot lambda: |- int reason = esp_reset_reason(); switch(reason) { case 1: return {\"Power-on reset\"}; case 3: return {\"Software reset\"}; case 4: return {\"Watchdog reset\"}; case 5: return {\"Deep sleep wake\"}; case 6: return {\"Brownout reset\"}; case 7: return {\"JTAG reset\"}; default: return {\"Unknown reset (\" + to_string(reason) + \")\"}; } ------------------------------------------------------------------------------ \u00b6 Watchdog monitoring sensors \u00b6 - Defines template sensors for reliability and diagnostics: \u00b6 - Watchdog reset counter: Tracks number of watchdog resets since boot. \u00b6 - Last reset code: Exposes the raw reset reason code for advanced troubleshooting. \u00b6 - System health score: Calculates a health score based on uptime and reset frequency. \u00b6 - These sensors provide insight into system stability and help with proactive maintenance. \u00b6 - Parameters (per sensor): \u00b6 name: Sensor name \u00b6 id: Sensor ID \u00b6 unit_of_measurement: Unit for sensor value \u00b6 accuracy_decimals: Number of decimals to report \u00b6 icon: Icon for Home Assistant \u00b6 update_interval: How often to update the sensor \u00b6 lambda: C++ code for sensor value \u00b6 ------------------------------------------------------------------------------ \u00b6 sensor: # Watchdog reset counter for reliability tracking # - Counts watchdog resets since boot - platform: template name: \"Watchdog Resets\" # name Sensor name for reset counter id: watchdog_reset_counter # id Sensor ID unit_of_measurement: \"resets\" accuracy_decimals: 0 icon: \"mdi:counter\" update_interval: 60s # Check once per minute lambda: |- // Count watchdog resets since boot static int reset_count = 0; if (esp_reset_reason() == 4) { reset_count++; } return reset_count; # Raw reset reason code for advanced diagnostics # - Exposes the raw reset reason code for troubleshooting - platform: template name: \"Last Reset Code\" # name Sensor name for raw code id: last_reset_reason_code # id Sensor ID unit_of_measurement: \"\" accuracy_decimals: 0 icon: \"mdi:information\" update_interval: never # Set once on boot lambda: |- return esp_reset_reason(); # System health score based on reset frequency # - Calculates a health score based on uptime and reset frequency - platform: template name: \"System Health Score\" # name Sensor name for health score id: system_health_score # id Sensor ID unit_of_measurement: \"%\" accuracy_decimals: 1 icon: \"mdi:heart-pulse\" update_interval: 300s # Update every 5 minutes lambda: |- // Calculate health score based on uptime and reset frequency float uptime_hours = id(uptime_sensor).state / 3600.0; int reset_count = id(watchdog_reset_counter).state; if (uptime_hours < 1.0) return 100.0; float health = 100.0 - (reset_count * 10.0); if (uptime_hours > 24.0) health += 5.0; return max(0.0f, min(100.0f, health)); ------------------------------------------------------------------------------ \u00b6 Software-controlled system restart for remote troubleshooting \u00b6 - Allows remote restart of the ESP32 via Home Assistant or API \u00b6 - Physical hardware reset available via external button wired to ESP32 EN pin \u00b6 Note: Physical hardware reset available via external button wired to ESP32 EN pin \u00b6 ------------------------------------------------------------------------------ \u00b6 switch: - platform: restart name: \"System Restart\" # name Switch name for restart id: system_restart_switch # id Switch ID icon: \"mdi:restart\"```","title":"Watchdog"},{"location":"watchdog/#component-watchdog","text":"","title":"Component: watchdog"},{"location":"watchdog/#source-homerhendelgitpumphousebosscommonwatchdogyaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/watchdog.yaml"},{"location":"watchdog/#generated-wed-jul-30-2025-10441-am","text":"```yaml","title":"Generated: Wed, Jul 30, 2025 1:04:41 AM"},{"location":"watchdog/#-","text":"","title":"------------------------------------------------------------------------------"},{"location":"watchdog/#file-watchdogyaml","text":"","title":"File: watchdog.yaml"},{"location":"watchdog/#file-type-esphome-yaml-include","text":"","title":"File Type: ESPHome YAML Include"},{"location":"watchdog/#purpose-system-reliability-watchdog-component-for-esp32-platforms","text":"","title":"Purpose: System reliability watchdog component for ESP32 platforms"},{"location":"watchdog/#version-071","text":"","title":"Version: 0.7.1"},{"location":"watchdog/#date-2025-07-24","text":"","title":"Date: 2025-07-24"},{"location":"watchdog/#author-roland-tembo-hendel-rhendelnexuslogiccom","text":"","title":"Author: Roland Tembo Hendel &#114;&#104;&#101;&#110;&#100;&#101;&#108;&#64;&#110;&#101;&#120;&#117;&#115;&#108;&#111;&#103;&#105;&#99;&#46;&#99;&#111;&#109;"},{"location":"watchdog/#_1","text":"","title":""},{"location":"watchdog/#description-provides-hardware-watchdog-timer-external-watchdog-trigger","text":"","title":"Description: Provides hardware watchdog timer, external watchdog trigger,"},{"location":"watchdog/#reset-reason-monitoring-and-system-health-diagnostics-for","text":"","title":"reset reason monitoring, and system health diagnostics for"},{"location":"watchdog/#mission-critical-pump-house-monitoring-applications","text":"","title":"mission-critical pump house monitoring applications."},{"location":"watchdog/#_2","text":"","title":""},{"location":"watchdog/#license-gnu-general-public-license-v30","text":"","title":"License: GNU General Public License v3.0"},{"location":"watchdog/#spdx-license-identifier-gpl-30-or-later","text":"","title":"SPDX-License-Identifier: GPL-3.0-or-later"},{"location":"watchdog/#copyright-c-2025-roland-tembo-hendel","text":"","title":"Copyright: (c) 2025 Roland Tembo Hendel"},{"location":"watchdog/#this-program-is-free-software-you-can-redistribute-it-andor","text":"","title":"This program is free software: you can redistribute it and/or"},{"location":"watchdog/#modify-it-under-the-terms-of-the-gnu-general-public-license","text":"","title":"modify it under the terms of the GNU General Public License."},{"location":"watchdog/#-_1","text":"","title":"------------------------------------------------------------------------------"},{"location":"watchdog/#-_2","text":"","title":"------------------------------------------------------------------------------"},{"location":"watchdog/#yaml-linter-configuration","text":"","title":"YAML linter configuration"},{"location":"watchdog/#-disables-quoted-strings-rule-for-improved-readability","text":"","title":"- Disables quoted-strings rule for improved readability"},{"location":"watchdog/#-ensures-that-string-values-do-not-require-unnecessary-quotes-improving","text":"","title":"- Ensures that string values do not require unnecessary quotes, improving"},{"location":"watchdog/#readability-and-maintainability-of-the-yaml-configuration","text":"","title":"readability and maintainability of the YAML configuration."},{"location":"watchdog/#-_3","text":"","title":"------------------------------------------------------------------------------"},{"location":"watchdog/#yamllint-disable-rulequoted-strings","text":"","title":"yamllint disable rule:quoted-strings"},{"location":"watchdog/#-_4","text":"","title":"------------------------------------------------------------------------------"},{"location":"watchdog/#boot-time-system-monitoring-initialization","text":"","title":"Boot-time system monitoring initialization"},{"location":"watchdog/#-sets-up-system-monitoring-and-software-watchdog-actions-to-run-on-boot","text":"","title":"- Sets up system monitoring and software watchdog actions to run on boot."},{"location":"watchdog/#-logs-system-and-reset-monitoring-status-for-diagnostics-and-reliability-tracking","text":"","title":"- Logs system and reset monitoring status for diagnostics and reliability tracking."},{"location":"watchdog/#-ensures-that-monitoring-is-active-as-soon-as-the-device-starts","text":"","title":"- Ensures that monitoring is active as soon as the device starts."},{"location":"watchdog/#-_5","text":"esphome: on_boot: priority: 200 # High priority - run early in boot sequence then: - logger.log: level: INFO tag: \"SYSTEM\" format: \"System monitoring initialized - software watchdog active\" - logger.log: level: INFO tag: \"SYSTEM\" format: \"Reset monitoring active - tracking system stability\"","title":"------------------------------------------------------------------------------"},{"location":"watchdog/#-_6","text":"","title":"------------------------------------------------------------------------------"},{"location":"watchdog/#watchdog-status-and-reset-reason-monitoring","text":"","title":"Watchdog status and reset reason monitoring"},{"location":"watchdog/#-defines-a-text-sensor-for-human-readable-reset-reason-tracking","text":"","title":"- Defines a text sensor for human-readable reset reason tracking."},{"location":"watchdog/#-uses-esp_reset_reason-to-determine-and-expose-the-last-reset-cause-as-a-string","text":"","title":"- Uses esp_reset_reason() to determine and expose the last reset cause as a string."},{"location":"watchdog/#-aids-in-diagnostics-and-troubleshooting-by-making-reset-causes-visible-in-home-assistant","text":"","title":"- Aids in diagnostics and troubleshooting by making reset causes visible in Home Assistant."},{"location":"watchdog/#-parameters","text":"","title":"- Parameters:"},{"location":"watchdog/#name-sensor-name-for-reset-reason","text":"","title":"name: Sensor name for reset reason"},{"location":"watchdog/#id-sensor-id","text":"","title":"id: Sensor ID"},{"location":"watchdog/#icon-icon-for-home-assistant","text":"","title":"icon: Icon for Home Assistant"},{"location":"watchdog/#update_interval-how-often-to-update-the-sensor","text":"","title":"update_interval: How often to update the sensor"},{"location":"watchdog/#lambda-c-code-to-determine-the-reset-reason","text":"","title":"lambda: C++ code to determine the reset reason"},{"location":"watchdog/#-_7","text":"text_sensor: # brief Human-readable reset reason tracking # details # - Exposes the last reset reason as a readable string # - Uses esp_reset_reason() to determine cause - platform: template name: \"Reset Reason\" # name Sensor name for reset reason id: reset_reason_text # id Sensor ID icon: \"mdi:restart\" update_interval: never # Set once on boot lambda: |- int reason = esp_reset_reason(); switch(reason) { case 1: return {\"Power-on reset\"}; case 3: return {\"Software reset\"}; case 4: return {\"Watchdog reset\"}; case 5: return {\"Deep sleep wake\"}; case 6: return {\"Brownout reset\"}; case 7: return {\"JTAG reset\"}; default: return {\"Unknown reset (\" + to_string(reason) + \")\"}; }","title":"------------------------------------------------------------------------------"},{"location":"watchdog/#-_8","text":"","title":"------------------------------------------------------------------------------"},{"location":"watchdog/#watchdog-monitoring-sensors","text":"","title":"Watchdog monitoring sensors"},{"location":"watchdog/#-defines-template-sensors-for-reliability-and-diagnostics","text":"","title":"- Defines template sensors for reliability and diagnostics:"},{"location":"watchdog/#-watchdog-reset-counter-tracks-number-of-watchdog-resets-since-boot","text":"","title":"- Watchdog reset counter: Tracks number of watchdog resets since boot."},{"location":"watchdog/#-last-reset-code-exposes-the-raw-reset-reason-code-for-advanced-troubleshooting","text":"","title":"- Last reset code: Exposes the raw reset reason code for advanced troubleshooting."},{"location":"watchdog/#-system-health-score-calculates-a-health-score-based-on-uptime-and-reset-frequency","text":"","title":"- System health score: Calculates a health score based on uptime and reset frequency."},{"location":"watchdog/#-these-sensors-provide-insight-into-system-stability-and-help-with-proactive-maintenance","text":"","title":"- These sensors provide insight into system stability and help with proactive maintenance."},{"location":"watchdog/#-parameters-per-sensor","text":"","title":"- Parameters (per sensor):"},{"location":"watchdog/#name-sensor-name","text":"","title":"name: Sensor name"},{"location":"watchdog/#id-sensor-id_1","text":"","title":"id: Sensor ID"},{"location":"watchdog/#unit_of_measurement-unit-for-sensor-value","text":"","title":"unit_of_measurement: Unit for sensor value"},{"location":"watchdog/#accuracy_decimals-number-of-decimals-to-report","text":"","title":"accuracy_decimals: Number of decimals to report"},{"location":"watchdog/#icon-icon-for-home-assistant_1","text":"","title":"icon: Icon for Home Assistant"},{"location":"watchdog/#update_interval-how-often-to-update-the-sensor_1","text":"","title":"update_interval: How often to update the sensor"},{"location":"watchdog/#lambda-c-code-for-sensor-value","text":"","title":"lambda: C++ code for sensor value"},{"location":"watchdog/#-_9","text":"sensor: # Watchdog reset counter for reliability tracking # - Counts watchdog resets since boot - platform: template name: \"Watchdog Resets\" # name Sensor name for reset counter id: watchdog_reset_counter # id Sensor ID unit_of_measurement: \"resets\" accuracy_decimals: 0 icon: \"mdi:counter\" update_interval: 60s # Check once per minute lambda: |- // Count watchdog resets since boot static int reset_count = 0; if (esp_reset_reason() == 4) { reset_count++; } return reset_count; # Raw reset reason code for advanced diagnostics # - Exposes the raw reset reason code for troubleshooting - platform: template name: \"Last Reset Code\" # name Sensor name for raw code id: last_reset_reason_code # id Sensor ID unit_of_measurement: \"\" accuracy_decimals: 0 icon: \"mdi:information\" update_interval: never # Set once on boot lambda: |- return esp_reset_reason(); # System health score based on reset frequency # - Calculates a health score based on uptime and reset frequency - platform: template name: \"System Health Score\" # name Sensor name for health score id: system_health_score # id Sensor ID unit_of_measurement: \"%\" accuracy_decimals: 1 icon: \"mdi:heart-pulse\" update_interval: 300s # Update every 5 minutes lambda: |- // Calculate health score based on uptime and reset frequency float uptime_hours = id(uptime_sensor).state / 3600.0; int reset_count = id(watchdog_reset_counter).state; if (uptime_hours < 1.0) return 100.0; float health = 100.0 - (reset_count * 10.0); if (uptime_hours > 24.0) health += 5.0; return max(0.0f, min(100.0f, health));","title":"------------------------------------------------------------------------------"},{"location":"watchdog/#-_10","text":"","title":"------------------------------------------------------------------------------"},{"location":"watchdog/#software-controlled-system-restart-for-remote-troubleshooting","text":"","title":"Software-controlled system restart for remote troubleshooting"},{"location":"watchdog/#-allows-remote-restart-of-the-esp32-via-home-assistant-or-api","text":"","title":"- Allows remote restart of the ESP32 via Home Assistant or API"},{"location":"watchdog/#-physical-hardware-reset-available-via-external-button-wired-to-esp32-en-pin","text":"","title":"- Physical hardware reset available via external button wired to ESP32 EN pin"},{"location":"watchdog/#note-physical-hardware-reset-available-via-external-button-wired-to-esp32-en-pin","text":"","title":"Note: Physical hardware reset available via external button wired to ESP32 EN pin"},{"location":"watchdog/#-_11","text":"switch: - platform: restart name: \"System Restart\" # name Switch name for restart id: system_restart_switch # id Switch ID icon: \"mdi:restart\"```","title":"------------------------------------------------------------------------------"},{"location":"web_server/","text":"Component: web_server \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/web_server.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:41 AM \u00b6 # ------------------------------------------------------------------------------ # File: web_server.yaml # File Type: ESPHome YAML Include # Purpose: Common ESPHome Web Server subsystem configuration # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Web server configuration for ESPHome nodes. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # ESPHome embedded web server configuration # - Enables the built-in web server for device diagnostics and control # - Provides HTTP authentication using secrets for security # - Accessible via browser on the configured port # - Parameters: # port: HTTP port for web access # auth.username: Web interface username # auth.password: Web interface password # ------------------------------------------------------------------------------ web_server : port : 80 # port HTTP port for web access auth : username : !secret web_user # username Web interface username password : !secret web_password # password Web interface password","title":"Web Server"},{"location":"web_server/#component-web_server","text":"","title":"Component: web_server"},{"location":"web_server/#source-homerhendelgitpumphousebosscommonweb_serveryaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/web_server.yaml"},{"location":"web_server/#generated-wed-jul-30-2025-10441-am","text":"# ------------------------------------------------------------------------------ # File: web_server.yaml # File Type: ESPHome YAML Include # Purpose: Common ESPHome Web Server subsystem configuration # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: Web server configuration for ESPHome nodes. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # ESPHome embedded web server configuration # - Enables the built-in web server for device diagnostics and control # - Provides HTTP authentication using secrets for security # - Accessible via browser on the configured port # - Parameters: # port: HTTP port for web access # auth.username: Web interface username # auth.password: Web interface password # ------------------------------------------------------------------------------ web_server : port : 80 # port HTTP port for web access auth : username : !secret web_user # username Web interface username password : !secret web_password # password Web interface password","title":"Generated: Wed, Jul 30, 2025 1:04:41 AM"},{"location":"wifi/","text":"Component: wifi \u00b6 Source: /home/rhendel/git/PumpHouseBoss/common/wifi.yaml \u00b6 Generated: Wed, Jul 30, 2025 1:04:41 AM \u00b6 # ------------------------------------------------------------------------------ # File: wifi.yaml # File Type: ESPHome YAML Include # Purpose: Common ESPHome WiFi subsystem configuration # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: WiFi configuration for ESPHome nodes. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # Wi-Fi client and fallback AP configuration # - Configures Wi-Fi client for normal operation # - Enables fallback Access Point (AP) if Wi-Fi connection fails # - Uses secrets.yaml for all sensitive credentials # - Supports power management and connection reliability options # - Parameters: # ssid: Wi-Fi SSID (from secrets.yaml) # password: Wi-Fi password (from secrets.yaml) # power_save_mode: Wi-Fi power save mode # fast_connect: Whether to wait for DHCP before continuing # output_power: Transmit power in dBm # reboot_timeout: Reboot if connection not established # ap: # ssid: Fallback AP SSID # password: Fallback AP password (from secrets.yaml) # ------------------------------------------------------------------------------ wifi : ssid : !secret wifi_ssid # ssid Wi-Fi SSID (from secrets.yaml) password : !secret wifi_password # password Wi-Fi password (from secrets.yaml) power_save_mode : none # power_save_mode Disable Wi-Fi power save fast_connect : false # fast_connect Wait for DHCP before continuing output_power : 20.0 # output_power Transmit power in dBm reboot_timeout : 30s # reboot_timeout Reboot if connection not established # -------------------------------------------------------------------------- # Fallback Access Point when Wi-Fi fails # - Provides a backup AP for device recovery if client connection fails # - AP SSID is auto-generated using node_name # - Password is stored in secrets.yaml # -------------------------------------------------------------------------- ap : ssid : \"${node_name} Fallback\" # ssid Auto-generated AP name using node_name password : !secret fallback_password # password Separate fallback password from secrets.yaml","title":"WiFi"},{"location":"wifi/#component-wifi","text":"","title":"Component: wifi"},{"location":"wifi/#source-homerhendelgitpumphousebosscommonwifiyaml","text":"","title":"Source: /home/rhendel/git/PumpHouseBoss/common/wifi.yaml"},{"location":"wifi/#generated-wed-jul-30-2025-10441-am","text":"# ------------------------------------------------------------------------------ # File: wifi.yaml # File Type: ESPHome YAML Include # Purpose: Common ESPHome WiFi subsystem configuration # Version: 0.7.1 # Date: 2025-07-24 # Author: Roland Tembo Hendel <rhendel@nexuslogic.com> # # Description: WiFi configuration for ESPHome nodes. # # License: GNU General Public License v3.0 # SPDX-License-Identifier: GPL-3.0-or-later # Copyright: (c) 2025 Roland Tembo Hendel # This program is free software: you can redistribute it and/or # modify it under the terms of the GNU General Public License. # ------------------------------------------------------------------------------ # ------------------------------------------------------------------------------ # YAML linter configuration # - Disables quoted-strings rule for improved readability # ------------------------------------------------------------------------------ # yamllint disable rule:quoted-strings # ------------------------------------------------------------------------------ # Wi-Fi client and fallback AP configuration # - Configures Wi-Fi client for normal operation # - Enables fallback Access Point (AP) if Wi-Fi connection fails # - Uses secrets.yaml for all sensitive credentials # - Supports power management and connection reliability options # - Parameters: # ssid: Wi-Fi SSID (from secrets.yaml) # password: Wi-Fi password (from secrets.yaml) # power_save_mode: Wi-Fi power save mode # fast_connect: Whether to wait for DHCP before continuing # output_power: Transmit power in dBm # reboot_timeout: Reboot if connection not established # ap: # ssid: Fallback AP SSID # password: Fallback AP password (from secrets.yaml) # ------------------------------------------------------------------------------ wifi : ssid : !secret wifi_ssid # ssid Wi-Fi SSID (from secrets.yaml) password : !secret wifi_password # password Wi-Fi password (from secrets.yaml) power_save_mode : none # power_save_mode Disable Wi-Fi power save fast_connect : false # fast_connect Wait for DHCP before continuing output_power : 20.0 # output_power Transmit power in dBm reboot_timeout : 30s # reboot_timeout Reboot if connection not established # -------------------------------------------------------------------------- # Fallback Access Point when Wi-Fi fails # - Provides a backup AP for device recovery if client connection fails # - AP SSID is auto-generated using node_name # - Password is stored in secrets.yaml # -------------------------------------------------------------------------- ap : ssid : \"${node_name} Fallback\" # ssid Auto-generated AP name using node_name password : !secret fallback_password # password Separate fallback password from secrets.yaml","title":"Generated: Wed, Jul 30, 2025 1:04:41 AM"}]}