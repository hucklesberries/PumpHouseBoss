# ------------------------------------------------------------------------------
#  @file        display_st7789.yaml
#  @brief       Waveshare 1.3" LCD Display Module subsystem configuration.
#
#  @author      Roland Tembo Hendel
#  @email       rhendel@nexuslogic.com
#
#  @license     GNU General Public License v3.0
#               SPDX-License-Identifier: GPL-3.0-or-later
#  @copyright   Copyright (c) 2025 Roland Tembo Hendel
#               This program is free software: you can redistribute it and/or
#               modify it under the terms of the GNU General Public License
#               as published by the Free Software Foundation, either version 3
#               of the License, or (at your option) any later version.
#
#               This program is distributed in the hope that it will be useful,
#               but WITHOUT ANY WARRANTY; without even the implied warranty of
#               MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#               GNU General Public License for more details.
#
#               You should have received a copy of the GNU General Public License
#               along with this program. If not, see <https://www.gnu.org/licenses/>.
#
#  @note        Co-developed with ChatGPT by OpenAI.
# ------------------------------------------------------------------------------

# @brief SPI bus configuration for ST7789V display module
spi:
  clk_pin: GPIO10              # @param clk_pin Clock pin for SPI
  mosi_pin: GPIO11             # @param mosi_pin MOSI data pin

# @brief Display driver configuration block for ST7789V LCD
# @details Configures resolution, pinout, refresh rate, and UI rendering logic
#          Includes dynamic rendering of flow rate sensor value
#          Screen is cleared to teal and overlays two lines of text
display:
  - platform: st7789v
    model: CUSTOM
    cs_pin: GPIO09          # @param cs_pin Chip select pin
    dc_pin: GPIO08          # @param dc_pin Data/command pin
    reset_pin: GPIO12       # @param reset_pin Reset line
    backlight_pin: GPIO13   # @param backlight_pin Backlight control (active HIGH)
    width: 240
    height: 240
    offset_width: 0
    offset_height: 0
    rotation: 0
    update_interval: 1s     # @param update_interval Refresh every second
    data_rate: 2MHz         # @param data_rate SPI clock frequency
    auto_clear_enabled: false
    lambda: |-
      it.fill(Color(0, 128, 128));  // RGB: teal
      it.print(10, 10, id(st7789_font), "Hello Roland!");
      it.print(10, 40, id(st7789_font), "Flow:");
      it.printf(70, 40, id(st7789_font), "%.2f L/min", id(flow_rate_sensor).state);

# @brief Font definition used for on-screen display
font:
  - file: "gfonts://Roboto" # @param file Google Fonts URI for Roboto
    id: st7789_font
    size: 18                # @param size Font size in pixels

# @brief Button A: GPIO15 with pull-up and inverted logic
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO15        # @param number Physical pin 15 for Button A
      mode: INPUT_PULLUP    # Use pull-up resistor
      inverted: true        # Active LOW
    name: "Button A"
    id: button_a
    on_press:
      then:
        - logger.log: "Button A pressed"
    on_release:
      then:
        - logger.log: "Button A released"

  # @brief Button B: GPIO17 with pull-up and inverted logic
  - platform: gpio
    pin:
      number: GPIO17        # @param number Physical pin 17 for Button B
      mode: INPUT_PULLUP
      inverted: true
    name: "Button B"
    id: button_b
    on_press:
      then:
        - logger.log: "Button B pressed"
    on_release:
      then:
        - logger.log: "Button B released"
