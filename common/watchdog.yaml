# ------------------------------------------------------------------------------
#  File:         watchdog.yaml
#  File Type:    ESPHome YAML Include
#  Purpose:      System reliability watchdog component for ESP32 platforms
#  Version:      0.8.0d
#  Date:         2025-07-24
#  Author:       Roland Tembo Hendel <rhendel@nexuslogic.com>
#
#  Description:  Provides hardware watchdog timer, external watchdog trigger,
#                reset reason monitoring, and system health diagnostics for
#                mission-critical pump house monitoring applications.
#
#  License:      GNU General Public License v3.0
#                SPDX-License-Identifier: GPL-3.0-or-later
#  Copyright:    (c) 2025 Roland Tembo Hendel
#                This program is free software: you can redistribute it and/or
#                modify it under the terms of the GNU General Public License.
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
#  YAML linter configuration
#   - Disables quoted-strings rule for improved readability
#   - Ensures that string values do not require unnecessary quotes, improving
#     readability and maintainability of the YAML configuration.
# ------------------------------------------------------------------------------
# yamllint disable rule:quoted-strings


# ------------------------------------------------------------------------------
#  Boot-time system monitoring initialization
#   - Sets up system monitoring and software watchdog actions to run on boot.
#   - Logs system and reset monitoring status for diagnostics and reliability tracking.
#   - Ensures that monitoring is active as soon as the device starts.
# ------------------------------------------------------------------------------
esphome:
  on_boot:
    priority: 200                       # High priority - run early in boot sequence
    then:
      - logger.log:
          level: INFO
          tag: "SYSTEM"
          format: "System monitoring initialized - software watchdog active"
      - logger.log:
          level: INFO
          tag: "SYSTEM"
          format: "Reset monitoring active - tracking system stability"

# ------------------------------------------------------------------------------
#  Watchdog status and reset reason monitoring
#   - Defines a text sensor for human-readable reset reason tracking.
#   - Uses esp_reset_reason() to determine and expose the last reset cause as a string.
#   - Aids in diagnostics and troubleshooting by making reset causes visible in Home Assistant.
#   - Parameters:
#       name: Sensor name for reset reason
#       id: Sensor ID
#       icon: Icon for Home Assistant
#       update_interval: How often to update the sensor
#       lambda: C++ code to determine the reset reason
# ------------------------------------------------------------------------------
text_sensor:
  #  brief Human-readable reset reason tracking
  #  details
  #   - Exposes the last reset reason as a readable string
  #   - Uses esp_reset_reason() to determine cause
  - platform: template
    name: "Reset Reason"           # name Sensor name for reset reason
    id: reset_reason_text          # id Sensor ID
    icon: "mdi:restart"
    update_interval: never         # Set once on boot
    lambda: |-
      int reason = esp_reset_reason();
      switch(reason) {
        case 1: return {"Power-on reset"};
        case 3: return {"Software reset"};
        case 4: return {"Watchdog reset"};
        case 5: return {"Deep sleep wake"};
        case 6: return {"Brownout reset"};
        case 7: return {"JTAG reset"};
        default: return {"Unknown reset (" + to_string(reason) + ")"};
      }

# ------------------------------------------------------------------------------
#  Watchdog monitoring sensors
#   - Defines template sensors for reliability and diagnostics:
#     - Watchdog reset counter: Tracks number of watchdog resets since boot.
#     - Last reset code: Exposes the raw reset reason code for advanced troubleshooting.
#     - System health score: Calculates a health score based on uptime and reset frequency.
#   - These sensors provide insight into system stability and help with proactive maintenance.
#   - Parameters (per sensor):
#       name: Sensor name
#       id: Sensor ID
#       unit_of_measurement: Unit for sensor value
#       accuracy_decimals: Number of decimals to report
#       icon: Icon for Home Assistant
#       update_interval: How often to update the sensor
#       lambda: C++ code for sensor value
# ------------------------------------------------------------------------------
sensor:
  #  Watchdog reset counter for reliability tracking
  #   - Counts watchdog resets since boot
  - platform: template
    name: "Watchdog Resets"           # name Sensor name for reset counter
    id: watchdog_reset_counter        # id Sensor ID
    unit_of_measurement: "resets"
    accuracy_decimals: 0
    icon: "mdi:counter"
    update_interval: 60s              # Check once per minute
    lambda: |-
      // Count watchdog resets since boot
      static int reset_count = 0;
      if (esp_reset_reason() == 4) {
        reset_count++;
      }
      return reset_count;

  #  Raw reset reason code for advanced diagnostics
  #   - Exposes the raw reset reason code for troubleshooting
  - platform: template
    name: "Last Reset Code"           # name Sensor name for raw code
    id: last_reset_reason_code        # id Sensor ID
    unit_of_measurement: ""
    accuracy_decimals: 0
    icon: "mdi:information"
    update_interval: never            # Set once on boot
    lambda: |-
      return esp_reset_reason();

  #  System health score based on reset frequency
  #   - Calculates a health score based on uptime and reset frequency
  - platform: template
    name: "System Health Score"       # name Sensor name for health score
    id: system_health_score           # id Sensor ID
    unit_of_measurement: "%"
    accuracy_decimals: 1
    icon: "mdi:heart-pulse"
    update_interval: 300s             # Update every 5 minutes
    lambda: |-
      // Calculate health score based on uptime and reset frequency
      float uptime_hours = id(uptime_sensor).state / 3600.0;
      int reset_count = id(watchdog_reset_counter).state;

      if (uptime_hours < 1.0) return 100.0;
      float health = 100.0 - (reset_count * 10.0);
      if (uptime_hours > 24.0) health += 5.0;
      return max(0.0f, min(100.0f, health));

# ------------------------------------------------------------------------------
#  Software-controlled system restart for remote troubleshooting
#   - Allows remote restart of the ESP32 via Home Assistant or API
#   - Physical hardware reset available via external button wired to ESP32 EN pin
#  Note: Physical hardware reset available via external button wired to ESP32 EN pin
# ------------------------------------------------------------------------------
switch:
  - platform: restart
    name: "System Restart"            # name Switch name for restart
    id: system_restart_switch         # id Switch ID
    icon: "mdi:restart"