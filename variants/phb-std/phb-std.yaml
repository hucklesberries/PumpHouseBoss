# ==============================================================================
#  File:         phb-std.yaml
#  File Type:    YAML File
#  Purpose:      PumpHouseBoss Standard Variant Main
#  Version:      0.9.0d
#  Date:         2025-07-24
#  Author:       Roland Tembo Hendel <rhendel@nexuslogic.com>
#
#  Description:  PumpHouseBoss Standard Variant is a Water Distribution System
#                Monitor and controller built on the ESP32 platform.
#
#  Features:     - Ingress and egress flow monitoring, metering
#                - Over/under flow-rate detection, alerts and alarms
#                - Automated solenoid control for emergency water-shutoff or
#                  water-flow management/control
#                - Manual emergency override to shut-off water-flow
#                - 4 line LCD (lcd_pcf8574 interface)
#                - Historical flow-rate/usage graphing
#                - Home Assistant integration via ESPHome
#                - Supports 1 MMU
#
#  License:      GNU General Public License v3.0
#                SPDX-License-Identifier: GPL-3.0-or-later
#  Copyright:    (c) 2025 Roland Tembo Hendel
#                This program is free software: you can redistribute it and/or
#                modify it under the terms of the GNU General Public License.
# ==============================================================================

# ------------------------------------------------------------------------------
#  YAML linter configuration
#   - Disables quoted-strings rule for improved readability
# ------------------------------------------------------------------------------
# yamllint disable rule:quoted-strings


# ------------------------------------------------------------------------------
#  Node identity, version, and hardware pin assignments
#   - Provides substitutions for node name, friendly name, version, and key pins
#   - Used throughout the configuration for maintainability
#   - Parameters:
#       node_name: Node ID used in ESPHome and logs
#       friendly_name: Human-readable name for dashboards
#       version: Firmware version tag injected into logs and sensors
#       flow_sensor_pin: Primary flow sensor pulse counter input
#       test_output_pin: GPIO test and verification pin
# ------------------------------------------------------------------------------
substitutions:
  chip_set:                "__PLATFORM__"
  node_name:               "__NODE_NAME__"
  friendly_name:           "__FRIENDLY_NAME__"
  version:                 "__VERSION__"
  pinLEDSystemInitialized: "GPIO32"
  pinLEDWiFiConnected:     "GPIO33"
  pinLEDHostConnected:     "GPIO25"
  pinMMU0Status:           "GPIO26"
  pinMMU0Control:          "GPIO16"
  pinMMU0Sense:            "GPIO04"


# ------------------------------------------------------------------------------
#  Global Variables
#   - Defines internal variables for use in automations and logic blocks
#   - Example: ha_connected tracks Home Assistant API connection status
#   - Parameters:
#       id: Variable name (referenced in lambdas)
#       type: Data type (e.g., bool, int, float)
#       restore_value: Whether to restore value after reboot (no for runtime state)
#       initial_value: Value at boot
# ------------------------------------------------------------------------------
globals:
  - id: gHAConnected
    type: bool
    restore_value: no
    initial_value: 'false'


# ------------------------------------------------------------------------------
#  I2C Bus Configuration
#   - Configures the I2C bus for peripherals (e.g., LCD, sensors)
#   - sda: GPIO pin used for I2C data (SDA)
#   - scl: GPIO pin used for I2C clock (SCL)
#   - scan: true enables automatic device address scanning (shows in logs)
# ------------------------------------------------------------------------------
i2c:
  sda:  "GPIO21"
  scl:  "GPIO22"
  scan: true


# ------------------------------------------------------------------------------
#  ESPHome-specific metadata and on_boot logic
#   - Sets node name and friendly name
#   - Publishes firmware version to Home Assistant on boot
#   - Parameters:
#       name: Node name
#       friendly_name: Human-readable name
#       on_boot: Actions to perform on boot
#   - NOTE: ESPHome does not currently support reset diagnostics on ESP32-S3.
#           These are placeholders until native support is available.
# ------------------------------------------------------------------------------
esphome:
  name: __DEVICE_NAME__
  friendly_name: __FRIENDLY_NAME__
  on_boot:
    priority: 100
    then:
      - text_sensor.template.publish:
          id: textFriendlyName
          state: "__FRIENDLY_NAME__"
      - text_sensor.template.publish:
          id: textVersion
          state: "__VERSION__"
      - text_sensor.template.publish:
          id: textNodeName
          state: "__NODE_NAME__"
      - text_sensor.template.publish:
          id: textIPAddress
          state: "No Connection"
      - text_sensor.template.publish:
          id: textResetReason
          state: "Power On Reset"
      - sensor.template.publish:
          id: sResetCode
          state: 1


# ------------------------------------------------------------------------------
#  ESP32 Reset Diagnostics (Fallback for ESP32-S3)
#   - ESPHome does not yet support esp32_reset_reason/last_reset on ESP32-S3.
#   - These template sensors default to 'Power On Reset' (string) and 1 (numeric).
#   - Update to native sensors when ESPHome adds support for ESP32-S3.
#   - Parameters:
#       platform: template
#       name: Sensor name (shown in Home Assistant)
#       id: Sensor ID for internal reference
#   - NOTE: ESPHome does not currently support reset diagnostics on ESP32-S3.
#           These are placeholders until native support is available.
# ------------------------------------------------------------------------------
sensor:
  - platform: template
    name: "Last Reset Code"      # Fallback: always 1 (Power On Reset code)
    id: sResetCode
    lambda: |-
      return 1;
    update_interval: never
  - platform: uptime
    name: "Uptime"                # Uptime in seconds since boot
    id: sensorUpTime


# ------------------------------------------------------------------------------
#  Uptime and flow rate sensors (hall-effect pulse counter)
#   - Uptime sensor: seconds since boot
#   - Flow rate sensor: hall-effect pulse counter, configurable input pin
#   - Calibration factor converts pulses to L/min
#   - Parameters:
#       platform: Sensor platform (uptime, pulse_counter)
#       pin: Input pin for pulse counter
#       name: Sensor name
#       id: Sensor ID
#       update_interval: Update frequency
#       count_mode: Pulse counting mode
#       internal_filter: Filter for pulse input
#       unit_of_measurement: Measurement units
#       accuracy_decimals: Number of decimals
#       filters: Calibration factor
# ------------------------------------------------------------------------------
binary_sensor:
  - platform: status
    id: bsWiFiConnected
  - platform: template
    id: bsSystemInitialized
    name: "System Initialized"
    lambda: |-
      // Always true after boot
      return true;


# ------------------------------------------------------------------------------
#  Template text sensors
#   - Firmware Version: Publishes the firmware version string to Home Assistant
#   - Reset Reason: Fallback for ESP32-S3, always 'Power On Reset'
#   - Parameters:
#       platform: template
#       name: Sensor name
#       id: Sensor ID
#       icon: Home Assistant icon (optional)
#       update_interval: Update frequency
#       lambda: Lambda function for value
#
# NOTE: ESPHome does not currently support reset diagnostics on ESP32-S3.
# This is a placeholder until native support is available.
# ------------------------------------------------------------------------------
text_sensor:
  - platform: template
    name: "Variant"
    id: textFriendlyName
    icon: "mdi:tag"
    update_interval: never
    lambda: |-
      return {"__FRIENDLY_NAME__"};
  - platform: template
    name: "Firmware Version"
    id: textVersion
    icon: "mdi:tag"
    update_interval: never
    lambda: |-
      return {"__VERSION__"};
  - platform: template
    name: "Node Name"
    id: textNodeName
    icon: "mdi:tag"
    update_interval: never
    lambda: |-
      return {"__NODE_NAME__"};
  - platform: template
    name: "IP Address"
    id: textIPAddress
    icon: "mdi:tag"
    update_interval: never
    lambda: |-
      return {"No Connection"};
  - platform: template
    name: "Reset Reason"
    id: textResetReason
    update_interval: never
    lambda: |-
      return {"Power On Reset"};


# ------------------------------------------------------------------------------
#  Common package includes for modular configuration
#   - Modularizes ESPHome and custom components
#   - Parameters:
#       esp32: ESP32 board and framework config
#       display: Display configuration (e.g., ST7789V panel)
#       wifi: Wi-Fi credentials, static IP, and fallback
#       ota: OTA settings (port, auth)
#       web: Web interface (http://<device>.local)
#       logging: USB/UART logging config (level, baud)
# ------------------------------------------------------------------------------
packages:
  esp32:       !include ../../common/esp32.yaml
  wifi:        !include ../../common/wifi.yaml
  ota:         !include ../../common/ota.yaml
  api:         !include ../../common/api.yaml
  web:         !include ../../common/web_server.yaml
  logging:     !include ../../common/logging.yaml
  indications: !include ../../common/indications.yaml
  display:     !include ../../common/display_pcf8574.yaml
  mmu:         !include ../../common/mmu.yaml

